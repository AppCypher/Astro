# created: 22/08/17 (Astro 0.1.05)
# edited:
# Integer comparison 
let a = scan('Enter value of a: ')
let b = scan('Enter value of b: ')
 
if a < b:
    print 'a is less than b'
elif a > b:
    print 'a is greater than b'
elif a == b:
    print 'a is equal to b'

# created: 22/08/17 (Astro 0.1.05)
# edited:
# Number reversal game
'''
number reversal game
    Given a jumbled list of the numbers 1 to 9
    Show the list.
    Ask the player how many digits from the left to reverse.
    Reverse those digits then ask again.
    until all the digits end up in ascending order.
'''.print()

var data, trials = list('123456789'), 0
shuffle(data) while data == sorted(data):
    
while data != sorted(data):
    trials += 1
    flip = int(scan('#$:2(trials): LIST: $(join(' ', data)) Flip how many?: '))
    data[:flip] = reversed(data[:flip])
 
print '\nYou took $:2(trials) attempts to put the digits in order!'

# created: 22/08/17 (Astro 0.1.05)
# edited:
# Queue 
let myQueue = Queue()
myQueue.put 'foo'
myQueue.put 'bar'
myQueue.put 'baz'
print myQueue.get() # => 'foo'
print myQueue.get() # => 'bar'
print myQueue.get() # => 'baz'

# created: 22/08/17 (Astro 0.1.05)
# edited:
# Send an unknown method call # currently unsupported
type Example
fun foo(ex, x): 42 + x
 
name = 'foo'
call(name, Example(), 5) # => 47

# created: 22/08/17 (Astro 0.1.05)
# edited:
# SHA-1
let hash = sha1 bytes('Ars longa, vita brevis', encoding:'ascii')

# created: 22/08/17 (Astro 0.1.05)
# edited:
# Tokenize a string
let text = 'Hello,How,Are,You,Today'
let tokens = text.split(/,/)
print join('.', tokens)

# created: 22/08/17 (Astro 0.1.05)
# edited: 
# String comparison
fun main(args): ## Array[Str]
    let a = "astro"
    let b = "astro"
    print("Case sensitive comparisons:\n")
    print("astro and astro are equal     = $(a == b)")
    print("astro and astro are not equal = $(a != b)")
    print("astro comes before astro      = $(a < b)")
    print("astro comes after astro       = $(a > b)")
    print("\nCase insensitive comparisons:\n")
    print("astro and astro are equal     = $(a == b.lower())")
    print("astro and astro are not equal = $(a != b.lower())")
    print("astro comes before astro      = $(a < b.lower())")
    print("astro comes after astro       = $(a > b.lower())")

# created: 23/07/17 (Astro 0.1.02)
# edited: 05/08/17 (Astro 0.1.04)
# ABC Problem
fun abc(s, list):
  return true if s.isEmpty() 
  for i <- [:list.size]:
    return any([abc(s[:end], val list.delete(i))]) ...
    if s[end-1] in list[i] else true
  false

let test = ["A", "BARK","BOOK","TREAT","COMMON","SQUAD","CONFUSE"]
let list = ["BO","XK","DQ","CP","NA","GT","RE","TG","QD","FS","JW",
"HU","VI","AN","OB","ER","FS","LY","PC","ZM"]
for s <- test:
    println "$(s.%-8s) | $(abc(s, list))" 

# created: 23/07/17 (Astro 0.1.01)
# edited: 05/08/17 (Astro 0.1.04)
# 99 Bottles of Beer
fun bottles(n): 
    | 0 -> "No more bottles"
    | 1 -> "1 bottle"
    | _ -> "$n bottles"
    
for n <- [100:1]:
    println """
    $(bottles n) of beer on the wall
    $(bottles n) of beer
    Take one down, pass it around
    $(bottles n-1) of beer on the wall\n
    """

# created: 23/07/17 (Astro 0.1.01)
# edited:
# Averages/Root Mean Square
fun rootMeanSq(l): sqrt(mean(l²))

# created: 23/07/17 (Astro 0.1.01)
# edited:
# Caesar Cipher 
fun caesar(s, k, decode: false):
    if decode: k = 26 - k 
    "".join(char((int(c) - 65 + k) % 26 + 65) | c <- s.upper(), "a" <= c <= "A")

let msg = "The quick brown fox jumped over the lazy dogs"
println msg
let enc = caesar(msg, 11)
println =>(enc) =>(caesar(enc, 11, decode: true))

# created: 23/07/17 (Astro 0.1.01)
# edited:
# Averages/Arithmetic Mean
mean([1,2,3])
mean([1:10])
mean([])

# created: 23/07/17 (Astro 0.1.01)
# edited:
# Hello World/Text 
println "Hello world!"

# created: 23/07/17 (Astro 0.1.01)
# edited: 05/08/17 (Astro 0.1.04)
# 15 Puzzle 
type Puzzle(items: {:}, position: -1)
 
fun mainFrame(puz):
    let d = puz.items
    println '+-----+-----+-----+-----+'
    println '|$(d[1])|$(d[2])|$(d[3])|$(d[4])|'
    println '+-----+-----+-----+-----+'
    println '|$(d[5])|$(d[6])|$(d[7])|$(d[8])|'
    println '+-----+-----+-----+-----+'
    println '|$(d[9])|$(d[10])|$(d[11])|$(d[12])|'
    println '+-----+-----+-----+-----+'
    println '|$(d[13])|$(d[14])|$(d[15])|$(d[16])|'
    println '+-----+-----+-----+-----+'

fun format(puz, ch):
    let ch = ch.trim()
    ch.size 
    | 1 -> '  $ch   '
    | 2 -> '  $ch '
    | 0 -> '     '

fun change(puz, to):
    let fro = puz.position
    for (a, b) <- puz.items if b == puz.format(str(to)):
        to = a
        break
    swap puz.items.|{fro}, {to}|
    puz.position = to

fun buildBoard(puz, difficulty):
    for i <- [1:17]:
        puz.items{i} = puz.format(str(i))
    var tmp = 0
    for (a, b) <- puz.items if b == '  16 ':
        puz.items{a} = '     '
        tmp = a
        break
    puz.position = tmp
    let diff = 100
    difficulty
    | 0 -> diff = 10
    | 1 -> diff = 50
    for _ in [:diff]:
        let lst  = puz.valid_moves()
        let lst1 = []
        for j <- lst: lst1.append(int(j.trim()))
        puz.change(lst1[randInt(0, size(lst1)-1)])

fun validMoves(puz):
    let pos = puz.position
    | 6  || 7 || 10 || 11 -> puz.items.|{pos - 4},{pos - 1}, {pos + 1}, {pos + 4}|
    | 5  || 9  -> puz.items.|{pos - 4}, {pos + 4}, {pos + 1}|
    | 8  || 12 -> puz.items.|{pos - 4}, {pos + 4}, {pos - 1}|
    | 2  || 3  -> puz.items.|{pos - 1}, {pos + 1}, {pos + 4}|
    | 14 || 15 -> puz.items.|{pos - 1}, {pos + 1}, {pos - 4}|
    | 1  -> puz.items.|{pos + 1}, {pos + 4}|
    | 4  -> puz.items.|{pos - 1}, {pos + 4}|
    | 13 -> puz.items.|{pos + 1}, {pos - 4}|
    | 16 -> puz.items.|{pos - 1}, {pos - 4}|

fun gameOver(puz):
    var flag = false
    for (a, b) <- puz.items if b == (' ' * 5): _
    else: flag = (a == int trim b)
    flag
 
 
let g = Puzzle()
g.buildBoard(int scanln 'Enter the difficulty : 0 1 2\n2 => highest 0=> lowest\n')
g.mainFrame()
println 'Enter 0 to exit'
loop:
    println 'Hello user:\nTo change the position just enter the no. near it'
    let lst  = g.valid_moves()
    let lst1 = []
    for i <- lst:
        lst1.append(int(i.trim()))
        print '[i.strip()] \t'
    println()
    let x = int(input())
    | 0        -> break
    | !in lst1 -> println 'Wrong move'
    | else     -> g.change(x)
    g.mainFrame()
    if g.gameOver():
        print 'You WON'
        break

# ceated: 13/06/17 (Astro 0.1.0)
# edited: 05/08/17 (Astro 0.1.04)
# 100 Doors
-- unoptimized  
var doors = falses 100
for a <- [:101]:
    for b <- [a:a:101]: doors[b] = !doors[b]
    println "Door $a is $('open.' if doors[a] else 'closed.')"

-- optimized
for i <- [:10]: println "Door $(i²) is open."
