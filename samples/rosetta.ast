# created: 13/09/17 (Astro 0.1.7a)
# edited: 11/12/17 (Astro 0.1.12a)
# Accumulator Factory
fun accumulator(sum) = |n| => sum += n
let f = accumulator(5)
print f(5)   # 10
print f(10)  # 20
print f(2.4) # 22.4

# created: 13/09/17 (Astro 0.1.7a)
# edited: 11/12/17 (Astro 0.1.12a)
# Read a File Line By Line
try file = open('foobar.txt'):
    print(line) for line in file

# created: 13/09/17 (Astro 0.1.7a)
# edited: 12/12/17 (Astro 0.1.12a)
# Sorting Algorithms/Merge Sort
fun mergeSort(m):
    return m if m.size ≤ 1
    let middle = m.size / 2
    let left = merge(m[:middle])
    let right = merge(m[middle:]);

fun merge(left, right):
    let result = []
    while not |left or right|.isEmpty:
        result.push(left.shift() if |left ≤ right|.first else right.shift())
        result.push(left.push right)

let array = [7, 6, 5, 9, 8, 4, 3, 1, 2, 0]
print mergeSort(array)

# created: 07/09/17 (Astro 0.1.6)
# edited: 11/12/17 (Astro 0.1.12a)
# Maximum Triangle Path Sum
fun solve(var tri):
    while tri.size > 1:
        let t0 = tri.pop()
        for (i, t) in enumerate(tri[!0]):
            tri[!0, i] = max(t0[i], t0[i+1]) + t
    tri[0, 0]

let data = '''
                          55
                        94 48
                       95 30 96
                     77 71 26 67
                    97 13 76 38 45
                  07 36 79 16 37 68
                 48 07 09 18 70 26 06
               18 72 79 46 59 79 29 90
              20 76 87 11 32 07 07 49 18
            27 83 58 35 71 11 25 57 29 85
           14 64 36 96 27 11 58 56 92 18 55
         02 90 03 60 48 49 41 46 33 36 47 23
        92 50 48 02 36 59 42 79 72 20 82 77 42
      56 78 38 80 39 75 02 71 66 66 01 03 55 72
     44 25 67 84 71 67 11 61 40 57 58 89 40 56 36
   85 32 25 85 57 48 84 35 47 62 17 01 01 99 89 52
  06 71 28 75 94 48 37 10 23 51 06 48 53 18 74 98 15
27 02 92 23 08 71 76 84 15 52 92 63 81 10 44 10 69 93'''

print solve(data.lines.map |x| => x.trim().split().map(int))

# created: 07/09/17 (Astro 0.1.6)
# edited:
# Address of a Variable
var x = 12
var pointer = ptr(x) # get pointer
print pointer        # print address
pointer.set 0xFFFE   # set the address

# created: 07/09/17 (Astro 0.1.6)
# edited: 11/12/17 (Astro 0.1.12a)
# Conditional Structures
if x == 0:
    foo()
elif x == 1:
    bar()
elif x == 2:
    baz()
else:
    qux()

x
| 0 => foo()
| 1 => bar()
| 2 => baz()
| _ => qux()


# created: 07/09/17 (Astro 0.1.6)
# edited: 11/12/17 (Astro 0.1.12a)
# Apply a Callback To an Array
let arr = [1, 2, 3, 4]
arr.each |x| => print '$x squared = $(x²)'

# created: 07/09/17 (Astro 0.1.6)
# edited: 11/12/17 (Astro 0.1.12a)
# Comma Quibbling
fun commaQuibble(s):
    var result = ''
    for (i, c) in enumerate(s):
        if i > 0:
            result += ', ' if i < s[!0] else 'and '
        result += c
    result = "{ $result }"

var s = [ [] ['ABC'] ['ABC', 'DEF'] ['ABC', 'DEF', 'G', 'H'] ]

for i in s: print commaQuibble(i)

# created: 22/08/17 (Astro 0.1.05)
# edited: 12/12/17 (Astro 0.1.12a)
# Integer Comparison
let a = scan('Enter value of a: ')
let b = scan('Enter value of b: ')

if a < b:
    print 'a is less than b'
elif a > b:
    print 'a is greater than b'
elif a == b:
    print 'a is equal to b'

# created: 22/08/17 (Astro 0.1.05)
# edited: 19/09/17 (Astro 0.1.8)
# Number Reversal Game
print '''
number reversal game
    Given a jumbled list of the numbers 1 to 9
    Show the list.
    Ask the player how many digits from the left to reverse.
    Reverse those digits then ask again.
    until all the digits end up in ascending order.
'''

var data = list('123456789')
var trials = 0
while data == sorted(data): random.shuffle data
while data != sorted(data):
    trials += 1
    flip = int scan '#$trials: LIST: $(join data) Flip how many?: '
    data[:flip] = data[!flip:]

print '\nYou took $trials attempts to put digits in order!'

# created: 22/08/17 (Astro 0.1.05)
# edited: 19/09/17 (Astro 0.1.8)
# Queue?
let myQueue = Queue()
myQueue.push 'foo'
myQueue.push 'bar'
myQueue.push 'baz'
print myQueue.pop() # => 'foo'
print myQueue.pop() # => 'bar'
print myQueue.pop() # => 'baz'

# created: 22/08/17 (Astro 0.1.05)
# edited: 12/12/17 (Astro 0.1.12a)
# Send an Unknown Method Call # currently unsupported
type Example
fun foo(ex, x) = 42 + x

name = 'foo'
call(name, Example(), 5) # => 47

# created: 22/08/17 (Astro 0.1.05)
# edited: 12/12/17 (Astro 0.1.12a)
# SHA-1
import crypto { sha1 }
let hash = sha1 bytes('Ars longa, vita brevis', encoding:'ascii')

# created: 22/08/17 (Astro 0.1.05)
# edited: 12/12/17 (Astro 0.1.12a)
# Tokenize a String
let text = 'Hello,How,Are,You,Today'
let tokens = text.split(/,/)
print join(tokens, '.')

# created: 22/08/17 (Astro 0.1.05)
# edited: 12/12/17 (Astro 0.1.12a)
# String Comparison
fun main(args): ## Array[Str]
    let a = 'astro'
    let b = 'astro'
    print 'Case sensitive comparisons:\n '
    print 'astro and astro are equal     = $(a == b)'
    print 'astro and astro are not equal = $(a != b)'
    print 'astro comes before astro      = $(a < b)'
    print 'astro comes after astro       = $(a > b)'
    print '\nCase insensitive comparisons:\n'
    print 'astro and astro are equal     = $(a == b.lower())'
    print 'astro and astro are not equal = $(a != b.lower())'
    print 'astro comes before astro      = $(a < b.lower())'
    print 'astro comes after astro       = $(a > b.lower())'

# created: 23/07/17 (Astro 0.1.02)
# edited: 12/12/17 (Astro 0.1.12a)
# ABC Problem
fun abc(s, list):
    return true if s.isEmpty
    for i in 0..list.size:
        return any([abc(s[..!1], (val list).remove(i))]) ...
        if s[!0] in list[i] else true
    false

let test = ["A", "BARK","BOOK","TREAT","COMMON","SQUAD","CONFUSE"]
let list = ["BO","XK","DQ","CP","NA","GT","RE","TG","QD","FS","JW",
"HU","VI","AN","OB","ER","FS","LY","PC","ZM"]
for s in test:
    print "$:.-8(s) | $(abc(s, list))"

# created: 23/07/17 (Astro 0.1.01)
# edited: 12/12/17 (Astro 0.1.12a)
# 99 Bottles of Beer
fun bottles(n):
    | 0 => "No more bottles"
    | 1 => "1 bottle"
    | _ => "$n bottles"

for n in !100..1:
    print '''
    $(bottles n) of beer on the wall
    $(bottles n) of beer
    Take one down, pass it around
    $(bottles n-1) of beer on the wall\n
    '''

# created: 23/07/17 (Astro 0.1.01)
# edited: 12/12/17 (Astro 0.1.12a)
# Averages/Root Mean Square
fun rootMeanSq(l) = sqrt(mean(l²))

# created: 23/07/17 (Astro 0.1.01)
# edited: 12/12/17 (Astro 0.1.12a)
# Caesar Cipher
fun caesar(s, k, decode: false):
    if decode: k = 26 - k
    join(char((ord(c) - 65 + k) % 26 + 65) | c in s.upper() where 'a' ≤ c ≤ 'A')

let msg = 'The quick brown fox jumped over the lazy dogs'
print msg
let enc = caesar(msg, 11)
print(enc)
print(caesar(enc, 11, decode: true))

# created: 23/07/17 (Astro 0.1.01)
# edited: 12/12/17 (Astro 0.1.12a)
# Averages/Arithmetic Mean
mean([1,2,3])
mean([1..10])
mean([])

# created: 23/07/17 (Astro 0.1.01)
# edited: 12/12/17 (Astro 0.1.12a)
# Hello World/Text
print 'Hello world!'

# ceated: 13/06/17 (Astro 0.1.0)
# edited: 17/09/17 (Astro 0.1.8)
# 100 Doors
-- unoptimized
var doors = falses 100
for a in 0..101:
    for b in 101..a: doors[b] = not doors[b]
    print "Door $a is $('open.' if doors[a] else 'closed.')"

-- optimized
for i in 0..10: print "Door $(i²) is open."
