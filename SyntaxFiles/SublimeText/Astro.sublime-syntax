%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Astro
file_extensions:
  - astro
  - ast
scope: source.astro
contexts:
  main:

    - match: ^\s*-[^>].*$ # non_astro
      scope: comment.line.number-sign.astro
      name: non_astro 

    - match: (?<=fun |catch |ensure )[a-z_][A-Za-z0-9_!]*`? # functions
      scope: entity.name.function.astro
      name: functions 

    - match: (?<!\.|\|)@[A-Za-z][_A-Za-z0-9]+ # macros
      scope: markup.bold.astro 
      name: macros 

    - match: (#=|##=) # multiline_comments
      push: multiline_comments

    - match: (#|##).*$ # singleline_comments
      scope: comment.line.number-sign.astro
      name: singleline_comments

    - match: (?<=type |abst |fun )[A-Z][_A-Za-z0-9]*`? # typename_declaration
      scope: support.class.astro
      name: typename_declaration

    - match: \b([A-Z][_A-Za-z0-9]*)\b # typenames
      scope: support.class.astro
      name: typenames

    - match: (?<=\=\>|[^\.]\.)([!?]?[A-Za-z_][A-Za-z_0-9]*[!?]?)\b # dot_members
      scope: constant.numeric.astro
      name: dot_members

    - match: \b[0-9][A-Za-z0-9_]*((\.[0-9_]+)?e[+-]?[0-9_]+)?([A-Za-z][A-Za-z0-9]*)? # numbers
      scope: constant.numeric.astro
      name: numbers 

    - match: \b(true|false|nil)\b # constant_keywords
      scope: constant.language.astro
      name: constant_keywords 

    - match: \b(self|ext)\b # context_keywords
      scope: astro
      name: context_keywords

    - match: \b(for|in|and|or|not|end|spill|if|where|\?|else|elif|await|return|at|delegate|yield|while|redo|use|loop|try|catch|ensure|defer|raise|continue|break|pass|export|except|import)\b # control_keywords
      scope: keyword.control.astro
      name: control_keywords 

    - match: \b(type|fun|abst|obj|let|var|rxn|new|NaN|iso|val|ref|acq|const|\\\\|as)\b # declaration_keywords
      scope: storage.modifier.astro
      name: declaration_keywords

    - match: \[|\]|\(|\)|\{|\} # brackets 
      scope: markup.bold.astro
      name: brackets

    - match: ([A-Za-z_][_A-Za-z0-9]*[!?]?)(?=\s*(\[[A-Z][_A-Za-z0-9]*\]\s*)?(\.\.)?\() # function_calls 
      scope: entity.name.function.astro
      name: function_calls

    - match: =|\||&|\>|\<|\!|\+|-|\*|\^|%|\?|\b(and|not|or|in|band|bor|bxor|bnot|shl|shr)\b # operators
      scope: keyword.operator.astro
      name: operators
    
    # used to counter command notation highlight in "import math [cos]" for example
    - match: (?<=import)\s+[a-z/\.]+\s+(?=\[) # import
      scope: astro
      name: command_notation

    - match: (?<!let |var |rxn )([^=|\:|\;|\.|,|<|>|'|\"|\*|/|\-|\\+|\^|\%|\\|\}|\{|\)|\(|\!|\&|\$|\@|\||\~|type|fun|abst|let|var|rxn|as|for|in|and|not|or|end|spill|if|where|\?|else|elif|await|return|at|yield|while|redo|with|use|loop|try|catch|ensure|defer|raise|continue|break|pass|new|select|export|except|import|src|no|abst|obj|const|NaN|iso|val|ref|acq|const|and|or|in]|\b[a-z_][A-Za-z_0-9!]*)\s+(?=[A-Za-z_0-9]+|\"|'|\{|\[|\/)(?!(no|if|else|for|end|while|and|or|as|where|iso|val|ref|acq|in|except|mod)\b) # command_notation
      scope: entity.name.function.astro
      name: command_notation

    - match: \" # double_quoted_string
      push: double_quoted_string

    - match: \' # single_quoted_string
      push: single_quoted_string

    - match: /.+/ # regex
      scope: keyword.operator.astro
      name: regex

  double_quoted_string:
    - meta_scope: string.quoted.double.astro
    - match: \\(t|n|r|b|q|\"|'|\$|\\)
      scope: constant.character.escape.astro
    - match: \$[A-Za-z_][A-Za-z0-9_]*
      scope: constant.character.escape.astro
    - match: \$(:.+)?\(
      push: string_interpolate
    - match: \"
      scope: punctuation.definition.string.end.astro
      pop: true

  single_quoted_string:
    - meta_scope: string.quoted.single.astro
    - match: \\(t|n|r|b|q|\"|'|\$|\\)
      scope: constant.character.escape.astro
    - match: \$[A-Za-z_][A-Za-z0-9_]*
      scope: constant.character.escape.astro
    - match: \$(:.+)?\(
      push: string_interpolate
    - match: \'
      scope: punctuation.definition.string.end.astro
      pop: true

  string_interpolate:
    - meta_scope: constant.character.escape.astro
    - match: \(
      push: parens_match
    - match: \)
      pop: true
    - include: main

  multiline_comments:
    - meta_scope: comment.line.block.astro
    - match: (#=|##=)
      push: multiline_comments
    - match: =#|=##
      pop: true

  parens_match:
    - meta_scope: markup.bold.astro
    - match: \)
      pop: true 
