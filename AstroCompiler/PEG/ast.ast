## PROGRAM ##
program = { body }

## SUBJECT DECLARATION ##
subjectDeclaration1 = { ## AST-L1
  pattern: { patternType, names:[{name, privateAccess, rest}] }, 
  mutability, 
  value:expression 
}
subjectDeclaration2 = { name, privateAccess, mutability, value:expression } ## AST-L2

## FUNCTION DECLARATION ##
functionDeclaration = { 
  name, 
  privateAccess, 
  superParams: { mutability, rest, key, scopeKey, keyNeeded, value }
  params: { mutability, rest, key, scopeKey, keyNeeded, value }
  expressions 
}

## MACRO ##
macroDeclaration = { 
  name, 
  privateAccess, 
  params: { mutability, rest, key, scopeKey, keyNeeded, value }
  expressions 
}

## TYPE DECLARATION ##
typeDeclaration = { name, privateAccess, superTypes, fields }

## ABST DECLARATION ##
abstDeclaration = { 
  name, 
  privateAccess, 
  superTypes, 
  body: subjectDeclaration1 | subTypes:{ name, privateAccess, params:[{mutability, key, scopeKey, keyNeeded, value}] },
  constructorFunction
}
# typeParam = { mutability, key, scopeKey, keyNeeded, privateAccess, value }

## IMPORT ##
importDeclaration = { dynamic, key, path, names:[{ actualName, scopeName }] }

## CONTROL FLOW ##
if = { condition, body:expressions, elifs, elseBody:expressions }
elif = { condition, body:expressions }
loop = { body:expressions }
while = { condition, body:expressions }
for = { initializations, body:expressions } ## AST-L1 
try = { body:expressions, catch } ## AST-L1
catch = { param, body:expressions } ## AST-L1
return = { value:atom, target }
break = { value, target } ## AST-L1
continue = { target } ## AST-L1
spill = { target } ## AST-L1
delegate = { name } ## AST-L1
await = { value:atom } ## AST-L1
yield = { value:atom }
raise = { value:atom }

## ASSIGNMENT ##
assign1 = { ## AST-L1
  pattern: { patternType, names:[name:dotChain, rest] }, 
  operator, 
  value:expression 
}
assign2 = { name:dotChain, value:expression } ## AST-L2

## EXPRESSIONS ##
binaryExpression = { ops, atoms }
unaryExpression = { op, atom, position }
expression = { referenceType, atom }
parens = { expression }
new = { fieldNames, values }
call = { keys, values }
index = { keys, ranges } ## AST-L1
dot = { name } ## AST-2
dotChain = { atoms } ## AST-3
range = { start, end, step }
object = { type, keys, values } ## AST-L2
pass = { }
$ = { }
pointer = { value }
pointed = { pointer }

## TYPE VALUE ##
functionType = { paramTypes, returnTypes }
typeRelation = { relation, type1, type2 }
type = { name, unknown }

## LITERALS ##
list = { values }
set = { values }
dict = { keys, values }
tuple = { values }
namedTuple = { keys, values }
regex = { value }
string = { value }
symbol = { value } 
boolean = { value }
int = { value, radix, precision }
float = { value, radix, precision }

