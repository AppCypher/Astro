## PROGRAM ##
program = { expressions }

## SUBJECT DECLARATION ##
subjectDeclaration1 = { pattern, mutability, atom } ## AST-L1
pattern = { type, names } ## AST-L1
subjectName = { name, spread, privateAccess } ## AST-L1
subjectDeclaration2 = { name, privateAccess, mutability, atom } ## AST-L2

## FUNCTION DECLARATION ##
functionDeclaration = { name, privateAccess, superParams, params, expressions }
functionParam = { key, value, scopeKey, keyImportance, mutability }

## TYPE DECLARATION ##
typeDeclaration = { name, privateAccess, superTypes, fields }
abstDeclaration = { name, privateAccess, superTypes, fields }

## IMPORT ##
importDeclaration = { key, path, objectNames, objectKeys, dynamism }

## CONTROL FLOW ##
if = { condition, expressions, elifs, else }
elif = { condition, expressions }
else = { expressions } 
loop = { expressions }
for { initializations, expressions } ## AST-L1 
try = { expressions, catch } ## AST-L1
catch = { typeName, expressions } ## AST-L1
return = { atom, target }
break = { value, target } ## AST-L1
continue = { target } ## AST-L1
spill = { target } ## AST-L1
delegate = { value } ## AST-L1
await = { value } ## AST-L1
yield = { atom }
raise = { atom }

## ASSIGNMENT ##
assign1 = { pattern, operator, atom } ## AST-L1
pattern = { type, names } ## AST-L1
subjectName = { name, spread, access } ## AST-L1
assign2 = { name, atom } ## AST-L2

## EXPRESSIONS ##
binaryExpression = { ops, atoms }
unaryExpression = { op, atom, position }
expression = { referenceType, atom }
parens = { expression }
new = { fieldNames, values }
call = { keys, values }
index = { keys, ranges } ## AST-L1
dot = { name } 
range = { start, end, step }
object = { type, keys, values } ## AST-L2
pointer = { value }
pointed = { pointer }


## TYPE VALUE ##
functionType = { paramTypes, returnTypes }
typeRelation = { relation, type1, type2 }
type = { name, unknown }

## LITERALS ##
list = { values }
set = { values }
dict = { keys, values }
tuple = { values }
namedTuple = { keys, values }
regex = { value }
string = { value }
symbol = { value } 
boolean = { value }
int = { value, radix, precision }
float = { value, radix, precision }

