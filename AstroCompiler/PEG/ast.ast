## PROGRAM ##
program = { expressions }

## SUBJECT DECLARATION ##
subjectDeclaration1 = { pattern, mutability, atom } ## ParseTree
pattern = { type, names } ## ParseTree
subjectName = { name, spread, publicAccess } ## ParseTree
subjectDeclaration2 = { name, publicAccess, mutability, atom } ## AST

## FUNCTION DECLARATION ##
functionDeclaration = { name, publicAccess, superParams, params, expressions }
functionParam = { key, value, scopeKey, keyImportance }

## TYPE DECLARATION ##
typeDeclaration = { name, publicAccess, superTypes, fields }
abstDeclaration = { name, publicAccess, superTypes, fields }

## IMPORT ##
importDeclaration = { key, path, objectNames, objectKeys, dynamism }

## CONTROL FLOW ##
if = { condition, expressions, elifs, else }
elif = { condition, expressions }
else = { expressions } 
loop = { expressions }
for { initializations, expressions } ## ParseTree, L1 AST 
try = { expressions, catch } ## ParseTree, L1 AST
catch = { typeName, expressions } ## ParseTree, L1 AST
return = { atom, target }
break = { value, target } ## ParseTree, L1 AST
continue = { target } ## ParseTree, L1 AST
spill = { target } ## ParseTree, L1 AST
delegate = { value } ## ParseTree, L1 AST
await = { value } ## ParseTree, L1 AST
yield = { atom }
raise = { atom }

## EXPRESSIONS ##
binaryExpression = { ops, atoms }
unaryExpression = { op, atom, position }
new = { fieldNames, values }
call = { keys, values }
dot = { name } 
range = { start, end, step }
atom = { reference, value }
object = { type, keys, values } ## AST
pointer = { value }
pointed = { pointer }

## ASSIGNMENT ##
assign1 = { pattern, atom } ## ParseTree
pattern = { type, names } ## ParseTree
subjectName = { name, spread, access } ## ParseTree
assign2 = { name, atom } ## AST

## TYPE VALUE ##
functionType = { paramTypes, returnTypes }
typeRelation = { relation, type1, type2 }
type = { name, unknown }

## LITERALS ##
list = { values }
set = { values }
dict = { keys, values }
tuple = { values }
namedTuple = { keys, values }
regex = { value }
string = { value }
symbol = { value } 
boolean = { value }
int = { value, radix, precision }
float = { value, radix, precision }

