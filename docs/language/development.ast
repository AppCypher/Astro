# Astro 0.1.14a
# 16/01/18
# REDESIGNING DELEGATED PROPERTIES
# Delegated properties are subjects whose assignment and value retireval is delegated to
# some functions.
type Person(var name: '', var age: del(age, age))
fun age(x, v) = x.age = v + 1 # Setter of delegated property must have at least two compulsory parameters.
fun age(x) = x.age + 1 # Getter of delegated property must have at least one compulsory parameters.
john.age = 56
john.age

# The `del`s call tuple can be left out, if delegate functions have the same names as the delegate properties.
type Person(var name: '', var age: del)

# CHANGE OCCURENCES OF SIZE TO LEN

# CHANGING CASCADING NOTATION, REMOVING WALL NOTATION
john~name, ~age
print~('hello')~('world')

# REMOVE NON-STANDARD NUMERIC LITERAL, USE PROPERTIES INSTEAD
2344'f32 #'
2344.f32

# Astro 0.1.14a
# 15/01/18
# IMPROVING CASCADING NOTATION, REMOVING WALL NOTATION
print_.('hello')_.('world')
play_.[5], _.[10]
game_.start()_.stop()
print
    _.('hello')
    _.('world')

# Changing properties syntax. STALE
# Properties are no longer bound to subjects
fun age(a) = set (a.age + 5) get (a.age - 5)

# FIX: SYNTAX HIGHLIGHT
- highlight imported filename
    import foo/my-new-project

- change name pattern, can have trailing underscores
    x._name_ | _name_() | @_name_
    x.name_ | name_() | @name_
    x._name | _name() | @_name
    x.name | name() | @name

- removw hifhlight on `extend` kewyord
    extend MyType

- highlight `del` kewyord •
    del name = 50

- remove highlight on nonstandard numeric literals
    2344'f32 #'
    2344.f32

- fix regex highlight (/[^/]+/)
    let x = /\d/ + re.'\[a-z]' + /\d/

- highlight dot natation member call and function call.
    john~name, ~age
    print~('hello')~('world')

- remove highlight on `set` and `get`.
    fun age(a) = set (a.age + 5) get (a.age - 5)

- fix multible binding highlight
    let a b c = 45

- highlight cascading function call
    print_.('hello')_.('world')

- fix names highlight. No trailing underscore.
    Foo_.name
    Foo_.name_

- remove `fib` highlight
    fib foo(): pass

# Astro 0.1.13a
# 07/01/18
# Tuple Indexing
let book = ('Harry Potter', 'J.K. Rowling', 1995)
let title = book.1 # Harry Potter
let author = book.2 # J.K. Rowling
let year = book.3 # 1995

# Astro 0.1.13a
# 06/01/18
# FIX: SYNTAX HIGHLIGHT
- remove highlight on delegate
    delegate

- highlight `async` and `unsafe` keywords
    async, unsafe

- highlight `yield from` keywords
    yield from

- highlight regex literals
    name / age / day
    name = /regex/
    name(/ regex /)
    name[/ regex /]
    name{/ regex /}
    name(age, / age /)
    name =
    / regex /
    name = ...
    / regex /
    name = 5 ...
    / age / day
    name = 5 ++ / regex / -- name
    band/sss/
    and /regex/

- highlight `fib` keywords
    fib foo(): print 'hello'


# Astro 0.1.12a
# 12/12/17
# FIX: SYNTAX HIGHLIGHT
- highlight on not*
    not in
- remove member highlight on !*
    john.!happy
- remove highlight on catch*
    catch err: print(err)
    except err: print(err)
- highlight typeof keyword
    Int == typeof 45
- fix transpose operator when used with set, dict, list and tuple literal*
    [1, 2, 3]' # '
    (1, 2, 3)' # '
    {1, 2, 3}' # '
    abstract'
- remove highlight on prev cascading notation*
    for i in 0..n: print i
- remove highlight on prev cascading notation*
    print..('hello')..('hi')
- add more operators to command notation highlight exclusive list*
    ≥ ≤ ≠ ≈ × ± ÷
    a ÷ b
    a ≤ b
- highlight some identifier-based infix operators*
    mod
    x mod y
- fix highlight on hex, oct and bin numbers*
    0b10110001
    0o566768
    0x6FFF00
    1b
    2o
    3x
- field map highlight*
    list.$name
- non-standard literal highlight*
    ns.{}
    ns.[]
    ns.()
    ns.//
    ns.''
    ns.""
- nil operator should have the same syntax highlight as fields*
    siblings.sister?
    siblings.sister!
- remove use syntax highlight*
    use x, y:
- add lambda parameter block highlight*
    list.map(|x| => -x)
    list.each => print
- highlight do, remove highlight on redo*
    do:, redo
- highlight typeof*
    typeof 20
- highlight the following pattern as function call
   /fun\s*\(/
- highlight super keyword*
   new(x).super(y)
   super()
- highlight multiline strings properly
    '''hello \n '''
    """hello \n """


# PRINT FUNCTION
def print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
fun print(...args, sep: ' ', end: '\n', out: env.stdout, flush: false)

# Accessing values in dictionaries
parent{'mum', 'name'}
parent.mum?.name

# LIST SLICING
var reversed = nums[0:5]
var reversed = nums[0..5] # invalid

# Even though nested fields can be nillable, the same
# "?" or "!" operators shouldn't be repeated on adjacent field access
account?.year
account?.year!
account?.year? # invalid

# END IN LOOPS
for i in array: if i == 5:
    break
end: # Not a reserved keyword tho
    print('no break')

# IDENTIFIER BASED OPERATORS
in, mod

# EXCEPTIONABLE UNWRAP
let name #: String?
let otherName = name!
john!.name

# EMPTY OBJECT
var obj = {}

# MORE EXPLICIT IMPORT
import crypto
crypto.sha1('Baloon')

import crypto { sha1 }
sha1('Baloon')

import math { ... }
cos(45)

import nmath:math { cos, sine:sin }

# dynamic import not supported yet
import math:$somePath # invalid

# GENERIC TYPE SPECIALIZATION
type Box(id)
# types whose field types are not constrained like the example above, are treated like
# templates in C++ or generics in Java, and they get specialized with every different
# combination of field types
let a = Box('05') #: Box{Str}
let b = Box(5) #: Box{Int}

fun add(a, b): #: (Box, Box)
    |a + b|.id

add(a, b) # Error, same types but incompatible specialization
let b = a # Error, same types but incompatible specialization

# TYPE ANNOTATION
# A single character is not a valid typename, they are used as generic typenames instead
fun add(a, b): #: (T, T) -> T ~ T<:Int
    a + b

# GENERICS VALUE CONSTRAINT
type MyList: #: T, L[1..1_000] ~ L::Int
    let list = List[T](L, 0)
    let size = L
..

# REFERENCE AND VALUES
let buyer = acq game # acq is now deep copy
let rent = val house # val is now shallow copy

# MATRIX TRANSPOSE
let x = [1, 2, 3]' #'
let y = x' #'

# TYPEOF FUNCTION
x <: typeof(y)

# FOR LOOP TUPLE
for i, e in enumerate(array):
    print('$i -- $e')

# REMOVE PARAMETERIZED TRAIN INITIALIZATION
fun Teacher(<name, age>, id) # invalid
fun Teacher(id) = new(id).super(name, age)

# SUBTYPING AND INITIALIZATION
type Person(name, age)
type Teacher(id) <: Person
fun Teacher(id) = new(id).super(name, age)

# ABSTRACT TYPES
abst Color: Blue | Yellow | Green
abst Tree(var isHex):
    | Leaf(value)
    | Node(l, r)

# OPERATORS AND WHITESPACES
# binary operators can either have spaces on both sides or not have spaces at all
a+b
a + b
a +b # invalid
a+ b # invalid

# unary operators can not have spaces between them and their associated atom
+b
b+
+ b # invalid
b + # invalid

# OPERATORS
a + b
+(a, b)
a.+(b) # invalid

# Astro 0.1.12a
# 05/12/17
# EXCEPTIONABLE UNWRAP
string!.upper

# BOOLEAN NEGATION
not john.isHappy

# CASCADING NOTATION
p->name, ->age
print..(45)..(50) # invalid

# FIELD MAPPING
list.$field

# RANGE
for i in 0..10:
    print i

var array = [1, 2, 3, 4, 5, 6, 7]
array[0:!5]

# WALL NOTATION
print.|name, age|

# NESTED CONDITIONAL STRUCTURE
for i in 1..20: for j in !20..1:
    print(i)
end: # this end associates with outer for loop
    print(j)

[ i, j | i in 1..3; j in 1..3 where i == 3 ]

# DO WHERE MATCH
print $ where x
| 56 => 56

# DESTRUCTURING
let { x, y } = object
let [ x, y ] = array
let ( x, y ) = tuple
let newObj = { ...object, extra: 5 }

# SET DATA STRUCTURE
let y = set.[5, 2, 3, 4, 2, 5]

# LIST COMPREHENSION
(i | i in 1..30 where i > 5)
[i | i in 1..30 where i > 5]
{i : j | i, j in 1..30; 31..60 where i > 5}
set(i | i in 1..30 where i > 5)

# LAMBDA
arr.foldr |x, y| => x + y
arr.map |x| => x²
arr.show => print 'Hello'

# IIFE
() => print 'Hi'
(a: 56, b: 40) => print a + b

# PATTERN MATCHING
let [first, _, 45] = someArray
object
| Some(x, y) => x
| 75 || 67 => y
| _ > 75 => z
! 75 => t

# VECTORIZATION
a × b.

# SYMBOLS
$name
$(p.addr)

# MATH NOTATION
2f * 56p

# FUNCTION/TYPE/ABST DEFINITION
fun add(a, b) = a + b
fun foo = bar
type Ascii = [Byte]

# remove multiple declaration syntax
type
    Person(var name, var age)
    Id(var firstname, var lastname) # invalid syntax

# TYPES AS ARGUMENTS
fun foo(x) = 1 #: F64
fun foo(x) = 2 #: Int

foo(Int)
foo(F64)




# ==========================
# BEFORE MAJOR SYNTAX REFORM
# ==========================
# 09/11/17
# Astro 0.1.12a
# FIELD MAPPING
let students = getStudentsList()
students.:name
students.map(|s| => s.name)

# EXCEPTIONALE UNWRAP
let string = nil #: Str?
string!.upper

# "not" NOT "!"
john.!happy
not john.isHappy

# REMOVE SUBJECT ASSOCIATIVE DOT NOTATION
print $ where

# EXCEPT NOT CATCH
try: for line in lines:
    print line
except err:
    print err

# REDESIGNING CASCADE AND WALL NOTATION
# separate expressions
print..('Hello ')..('World!')
print.|('Hello '); ('World!')| # Invalid

# binary operators
int.|('56') + ('75')|
int..('56') + ..('75') # Invalid

# more...
let addressBook = AddressBookBuilder()
    ..name = 'jenny'
    ..email = 'jenny@example.com'
    ..phone = PhoneNumberBuilder()
        ..number = '415-555-0100'
        ..label = 'home'
        ..build()
    ..build()

john.|age + sister.age - mom.age|.print()

# 06/11/17
# Astro 0.1.12a
# NESTED CONDITIONAL CONSTRUCT
for x in [a:z]: for y in [z:a]: pass
for x in [a:z] for y in [z:a]: pass # Invalid
for x in [a:z], y in [z:a]: pass # Invalid

[i | i in a; x in b where i > 5]

# 05/11/17
# Astro 0.1.12a
# LAMBDA & IIFE # N0T FINALIZED
fixtureList.filter(|game| => game.!isCancelled)

var pplBelow25 = census.filter |person| =>
    person.age += 1
    person.age < 25

list.foldl(0) |x, y| => x + y

list.foo => x + y

(a:5, b:6) => a + b

() => print 'Hello'

# BLOCK START PUNCTUATION
# block start punctuation for fun, type, abst can now also be '='
# for consistency, it is advised to use '=' for definitions that span only one line
fun ²(x) = x * x
type Person = var name, age

# EXCEPTIONABLE UNWRAP
let name #: String?
let otherName = name!!

# DO MATCH
print $ where x
| 245 -> name
| 246 -> age

# CUSTOM IDENTIFIER-BASED INFIX OPERATORS REMOVED
# it causes parsing and readability ambiguity due to command notation
# also it may not be properly syntax highlighted. For example,
foo bar baz
# is the above foo(bar(baz)) or bar is just an infix operator

# 02/11/17
# Astro 0.1.12a
# REFERENCES AND VALUES
let buyer = acq game # acq is now deep copy
let buyer = val game # acq is now shallow copy

# IMPORTING MACROS
import lib { @myMacro }

# GENERIC TYPE SPECIALIZATION
type Box(id)
# types whose field types are not constrained like the example above, are treated like
# templates in C++ or generics in Java, and they get specialized with every different
# combination of field types
let a = Box('05') #: Box{Str}
let b = Box(5) #: Box{Int}

fun add(a, b): #: (Box, Box)
    |a + b|.id

add(a, b) # Error, same types but incompatible specialization
let b = a # Error, same types but incompatible specialization

# TYPE ANNOTATION
# A single character is not a valid typename, they are used as generic typenames instead
fun add(a, b): #: (T, T) -> T
    a + b

fun catch(action, h): #: (() -> Error|T, (Str) -> T) -> T
    action(); | Error(s) -> h(s)

# STRUCT
@struct
type Point(x, y)

# 01/11/17
# Astro 0.1.12a
# TYPE OBJECT
foo() :: () -> None
teacher :: Person
teacher <: Person

# GENERIC TYPE SPECIALIZATION
type Person(name, age)
let h = Person('Helen', 20)
let b = Person(4566, "020")
h :: Person{Str, Int}
b :: Person{Int, Str}
fun foo(p) #: Person
foo(h) :: (Person{Str, Int}) -> Str
foo(b) :: (Person{Int, Str}) -> Int

# WHERE GENERICS
## T, T -> T ~ T::Int
fun add(a, b):
    d = a + b + c

# Also
## T, T -> T where T::Int
fun add(a, b):
    d = a + b + c

# 29/10/17
# Astro 0.1.12a
# GENERICS VALUE CONSTRAINT
type MyList: #: T, l(1...1_000) ~ l::Int
    let list = List[T](l, 0)
    let size = l
..

# REDESIGN PATTERN MATCHING
# Type
| Point
| Point(a, 2)
| {a, b}
| {:a, :b}
| [a, 2]
| (56, a)
# Value
| 56
| $(x + y)
# Or
| 56, 78
# Not
! 2_344_569
# No artbitrary match

# 28/10/17
# Astro 0.1.12a
# NESTED CONDITIONAL CONSTRUCT # STALE
for x in [a:z] for y in [z:a]: pass
for x in [a:z], y in [z:a]: pass # Invalid

# 27/10/17
# Astro 0.1.12a
# FIX: SYNTAX HIGHLIGHT
- highligh on not
    not
- remove member hghlight on !
    john.!happy
- command notation highlight for $ in
    print $
- add some operators
    ×, ÷
- remove highlight on catch
    catch err: print(err)
- highlight typeof keyword
    Int == typeof 45
- fix transpose operator when used with set, dict, list and tuple literal
    [1, 2, 3]' # '
    (1, 2, 3)' # '
    {1, 2, 3}' # '

# MATRIX TRANSPOSE
    let b = a'
    var mat = [1, 2, 3]' # '

# TYPEOF
    typeof 45 # Int
    Int == typeof 45
    fun haveSameTypes(x, y):
        x && y :: typeof x

# WHEN MATCH # STALE
print $ when x
| 245 -> name
| 246 -> age

# REFERENCE AND VALUES
let buyer = acq game # acq is now deep copy
let rent = val house # val is now shallow copy

# 17/10/17
# Astro 0.1.12a
# FIX: SYNTAX HIGHLIGHT
# OPERATORS AND WHITESPACES
# binary operators can either have spaces on both sides or not have spaces at all
a+b
a + b
a +b # invalid
a+ b # invalid

# unary operators can not have spaces between them and their associated atom
+b
b+
+ b # invalid
b + # invalid

# ABSTRACT TYPES
abst Color: Blue | Yellow | Green
abst Tree:
    var isHex
    | Leaf(value)
    | Node(l, r)







# 17/10/17
# Astro 0.1.11a
# FIX: SYNTAX HIGHLIGHT
- remove highlight for ! and ? infront of function names
    getAccount!(name, age)
    getPerson! John

# REMOVE SYNTAX FOR ALLOWING ! and ? directly infront a function name
getAccount!(name, age)

# CHANGE RULE: ANONYMOUS FUNCTIONS ARE EXECUTED NOT AT THE POINT OF DECLARATION
fun _(): return a + b

# EXCEPTIONABLE UNWRAP SYNTAX
getAccount(name, age)!! # if result is nil, raise NilError

# IRRELEVANT VS PLACEHOLDER
list.map(2 + $)
message = 'my name is $name'
print $ if x
| 15 -> x²
| else -> x
($, T -> $)
# ---------------
let (_, age) = person
for _ in [1:fifty]:
    print('Hello')
fun _(): return a + b

# VECTORIZATION
5 * matrix.
matrix.map(5 * $)
for i in matrix: 5 * i

# PARTIAL APPLICATION
matrix.map(5 * $)

# UNKNOWN TYPE
($, $T -> $)
(!T, T -> T)

# LIST UNPACKING
let a = [1, 2; 3, 4]
let b = [
    unpack.[a!, a];
    unpack.[a, a!]
]
# 1, 3, 1, 2;
# 2, 4, 3, 4;
# 1, 2, 1, 3;
# 3, 4, 2, 4;

# CHANGE MATRIX TRANSPOSE OPERATOR
let a = [1, 2; 3, 4]
let b = a!

# DISTINCT TYPE VS ALIAS TYPE
type Meter = val Int
Meter(5) == Int(5) # false

type Meter = ref Int
Meter(5) == Int(5) # true

# 17/10/17
# Astro 0.1.10
# STRING OPERATIONS
var concatenate = 'ab' ++ 'c' # 'abc'
var multiply = 'ab' ** 2 # 'abcabc'
let subtract = 'abcac' -- 'ca' # 'abc'
let divide = 'abcdeabc' // 'de' # ['abc', 'abc']
let escapeSequences = '\t \n \' \" \[ \q \# \\'

# REMOVE CERTAIN ASSIGN PATTERNS
let {name | age} = person
let [name | age] = person

# 'WHERE' SYNTAX IN TYPE ANNOTATION
fun get(p): # P -> Int ~ P::Int
    p..name, ..age

# TYPE SIMPLIFICATION
type Meter = angle'
fun add(a, b): ## Meter, Meter -> Meter
    a + b

Array[Meter](56)

# 14/10/17
# Astro 0.1.10a
# MACROS
# inline macro
@typify abstract Person(var name, var age)
# block macro
@loop(times:3):
    print 'Happy birthday to you'
# macro functions cannot use subjects from outer scope
let name = sorted."play"
macro sorted(string): ## NSStr
    (:SortedStr('$(string.literal)'))
macro typify(abstract): ## Abst
    let els = abstract.elements
    let types = els.map |a| -> (:type $a)
    (:$abstract; $types)

# SYMBOLS
fun exec(exp):
    eval exp

exec (:2 + 2)
exec (:name)

# 07/10/17
# Astro 0.1.10a
# SELF ARGUMENT
(->> ['bread', 'pepper', 'tomato', 'lettuce', 'cucumber']
    (map #(str "sliced " %) ,,,)
    (interpose ", " ,,,)
    (reduce str ,,,)
    (str "I had a tasty lunch made with " ,,,))

['bread', 'pepper', 'tomato', 'lettuce', 'cucumber']
    .map('sliced ' + _)
    .join(', ')
    .mutate('I had a tasty lunch made with ' + self)

# 05/10/17
# Astro 0.1.10a
# VARIABLE PARAMETERS
for var i in list: print i
fun swap(var a, var b):
    a, b = b, a
type Person(var name, var age)

# 03/10/17
# Astro 0.1.10a
# IDENTITY COMPARISON
let a = 'Hello'
let b = a
let c = val b
a is b # true
a == b # true
a is c # false
a == c # true

# PARAMETER DESTRUCTURING FOR STATIC DICTIONARIES/LIST/SET/TUPLE
|{name:, age:}| -> print '$name $age'

# KEY WITH A VALUE OF THE SAME NAME AS AN EXTERNAL VARIABLE
var name, age = "John", 34
let Person = { name:, age: }

# 02/10/17
# Astro 0.1.10a
# COMPREHENSIONS
var listComprehension = list(yield x for i in [1:21] if i mod 2 != 0)
var listComprehension = [x | x in [1:21] where x mod 2 != 0]
let dictComprehension = {x : y | x in [1:11], y in [21:1] where even(y), x > 0}
var setComprehension  = {i | i in random(0, 200)}
var comprehension     = (i | i in random(0, 200))

# 29/09/17
# Astro 0.1.10a
# FIX: HIGHLIGHT
- non-literal numbers
    45600f32
    23.56
    0xF4555E
- 'is' keyword
    a is b

# PRIVATE MODIFIERS
var myName' = "Adam"
type Person(!name', !age')

# TYPE OF # STALE!
var techField = "AI"
var name ## .techField

# 22/09/17cdpeg
# Astro 0.1.10a
# IMPORT SYNTAX
import math:nypro/math {cos, sine:sin}

# DYNAMIC IMPORT
import !$userFolder/math {cos, sine:sin}

fun main():
    let userFolder = sys.userFolder

# 21/09/17
# Astro 0.1.10a
# MATH EXPRESSION
let puzzling = 3f + 2(6 + 1)
let complex  = 1 + 3'i

# NON-STANDARD NUMBER LITERAL
let change = 10'NGN
let pay    = 43.99'f

# 19/09/17
# Astro 0.1.10a
# FIX: HIGHLIGHT
- add macro
    macro sort(str): ##= Str =# SortedStr(str.literal)

# MACRO # STALE!
# macro functions cannot use subjects from outer scope
let name = sorted."play"
macro sorted(string): ## Str
    SortedStr(str.literal)

@typify
abst Person: Name, Age
macro typify(abstract): ## Abst
    let els = abstract.elements
    let types = els.map |a| -> s.(type a)
    types

# SYMBOLS # STALE!
fun exec(exp):
    exp.eval()

exec s.(2 + 2)
exec s.(name)

# GENERICS
## = T.Element(<:Equatable, ::U.Element)
fun anyCommonElements(lhs, rhs): ## |T, U|<:Sequence
    for litem in lhs, ritem in rhs:
        return true if litem == ritem
    return false

# 18/09/17
# Astro 0.1.10a
# COMPREHENSIONS # STALE!
var listComprehension = list(yield x for i in [1:21] if i mod 2 != 0)
var listComprehension = [x | x <- [1:21] where x mod 2 != 0]
let dictComprehension = {x : y | x <- [1:11], y <- [21:1] where even(y), x > 0}
var setComprehension  = {i | i <- random(0, 200)}

var pythagorasList = [(x, y, z) |
z <- [1:21]
y <- [1:z+1]
x <- [1:y+1]
where x² * y² == z²]

# BITWISE OPERATIONS
let x = 5 | 8
let y = 8 & 5
let z = 2 << 1
let a = 6 >> 1

# COMMAND NOTATION EXCEPTIONS
# if the argument is a standard regex, list, dict or set literal.
print([1])
print({2})
print(/abc/)
print [1] # error!

# FIX: HIGHLIGHT
- import dynamic module
    import !vector [Vec3]

# AGGREGATE MODULE
# a single module can be split between different files by numbering them in certain way.
# vector.ast, vector-1.ast, vector-2.ast, etc. all combine to a single module
import vector

# REMOVE NAMESPACE
import nmath:nypro/math [cosine:cos, sine:sin, π:pi]

# DYNAMIC IMPORT
# importing a module that is only available at runtime
import !vector
let y = Vec3(1, 2, 3)

# 17/09/17
# Astro 0.1.8
# FIX: HIGHLIGHT
- mod in command notation
    x mod 6 == 0
- command notation and literals [, {, /,
    print {}
    print []
    print //
    print[Int]()
- remove \[ from escape sequence
    '\ttest\['
- cascading call
    print..(6)
- remove namespace highlight
    namespace math
# REMOVE LAZY ASSIGNMENT
# RETURN NOTHING
# if a function returns nothing, it can be annotated None
    fun print(point): ## -> None
        print(point.|a, b|)

# SPECIAL FUNCTIONS/SUBJECTS HAVE PRECEDING UNDERSCORES
fun _get_index(my_list, index): pass
print _args[56]

# REPLACE FOR <- WITH FOR IN
for i in scoreList: print i

# COMPREHENSION
let ls = [i | i in [1:21].map(_^2) where i mod 5 != 0]
let ls = list(yield i for i in [1:21].map(_^2) if i mod 5 != 0)

# 17/09/17
# Astro 0.1.7a
# FIX: HIGHLIGHT
- preceding '-' in function highlight
    fun _getIndex(myList, index): pass
- super keyword
    print super
- namespace keyword
    namespace nmath = nypro/math
- remove do highlight
- remove non-standard literal highlight

# NON-STANDARD LITERAL
let n = 123f
let s = r."abc"
let r = r./abc/
let s = r.{456}
let l = r.[1,2]
let p = r.(1,2)

# SPECIAL FUNCTIONS/SUBJECTS HAVE PRECEDING UNDERSCORES
fun _get_index(my_list, index): pass
print _args[56]

# LIST FIELDS
let students = get_students()
print students.:gpa

# 13/09/17
# Astro 0.1.7a
# FIX: REGEX LITERAL TO BE EXEMPTED FROM BRACKETLESS CALLS
# LIST IS A SUBTYPE OF ARRAY
type List <: Array
fun List(...sizes, fill): # Int, $T
    new().Array(...sizes).populate(fill)

# DO BLOCK UNNECESSARY
() ->
    let country = 'Nigeria'
    print(country) # Nigeria

# NAMING CONVENTION
# snake case for variables, constants and function names
let book_title = "Ender's Game"
var current_year = 2017
fun add_numbers(a, b): a + b

# camel case for type names
type InventoryManager(name, id)
abst LightSource: SpotLight, Directional, Ambient

# acronyms in snake-cased names should be in lower case
var http_server = Server(3000)

# acronyms in camel-cased names should be in camel case
type XmlParser <: Parser

# # STANDARD NON-STANDARD LITERAL
# var ns_string = ns"name"
# var ns_regex  = ns/hello/
# var ns_dict   = ns{ title:, author: }
# var ns_list   = ns[1, 2, 3]

# POINTERS
# getting pointer to a primitive address
let num = 55
let pointer = ptr(num)

# setting address value
pointer.value = 57
print pointer

# set pointer address
pointer.set 0xFFFE

# allocating memory on the heap
let memory = malloc[Byte](5)

# free pointer memory
free([memory, pointer]) # throws compile time error if dangling pointer or aliasing problem is detected

# 10/09/17
# Astro 0.1.7a
# builtin modules are imported by default
math.cos(45)

# IMPORT ALL
import math
sin(34)
cos(25)

# when there is a clash you can use module namespace to disambiguate
import myMath [cos, sin]
math.sin(45)
sin(78) # you can use the one declared in your module without namespacing

# NAMESPACES
# when there is a module name clash, you can use namespace aliases
import nypro/math [sin]
namespace nmath = nypro/math
nmath.sin(78)

# SIMILAR KEY-VALUE NAME
let book = {
    title:
    author:
    isbn:
}

# 07/09/17
# Astro 0.1.06
# FROM BACK, REMOVE END
let array = [1, 2, 3, 5]
array[!0] = 4

# 02/09/17
# Astro 0.1.05+
# REMOVE MULTIPLE EXPRESSION WHERE SINGLE EXPRESSION IS NEEDED
let age = (print 'hello'; 56) # error!
let age = do:
    print 'hello'
    56

# REMOVE SINGLETON 'obj'
obj inventoryManager(name, inventory) # error!
let inventoryManager = {name:, inventory:}

# PROPERTIES
let size = {} -> {elements.count()}

# 29/08/17
# Astro 0.1.05+
# CASCADING NOTATION
vec
	..set(5f, 6f)
	..normalize()

vec.|(x * 6) + (y * 8)|

# REMOVE VECTORIZATION SYNTAX
let mat = a.dot..b # wrong!
let mat = vec.dot(a, b)

# IMPORT ALL
import plotter [...]
penDown(20, 40)
penMove(23, 56)

# NILLABLE TYPES AND GENERICS
let nillable ## Str?

# MACROS
type Tuple #! Class

# ACTORS
type BookManager <: Actor

# INTEROP PRTOPOSAL WITH JS AND PYTHON
@pyimport math [.]
math.sin(45)
math.cos(70)

@jsimport express [.]
let app = express()
let router = app.Router()

router.get('/') |req, res| ->
	res.status(200).sendFile('index.html')

# REMOVE MULTIPLE EXPRESSION IN PARENS
let a = (print 'hello'; 5) # error
let a = do: print 'hello'; 5

# DICTIONARIES, REMOVE PROTOTYPE
let family = {
	dad: 'Shade'
	mum: 'Tunde'
	sister:   ['Wale', 'Gbenga']
	brothers: ['Bisi', 'Dupe']
}

print family['sister']
print family.sister

var john = {
	name: 'John' ## Str
	age:  nil ## Int?
}

print john.name
john.gender = 'female'

# TYPE EXTENSION
type Person(!name, !age)

let john = Person('John', 25)

let Person.gender ## Str

# ARGS
fun printPerson(name., age.):
	print args

printPerson(john) # [name: 'John', age: 25]

# REMOVE UNNAMED LAMBDA ARGUMENTS
app.get ->
	$2.status(200).send({msg: 'sent successfully'}) # error!

app.get |req, res| ->
	res.status(200).send({msg: 'sent successfully'})


# 28/08/17
# Astro 0.1.05+
# BRACKETLESS FUNCTION CALL
# if a function takes only one argument, the call parens can be removed
# if the argument is not a list/set/dict literal or a prefix operator
echo value
echo [1] # will evaluate as echo[1] not echo([1])
echo +5 # will evaluate as echo + 5 not echo(+5)

# ENUM
# abst typevalues don't need scoping when used in the same module as they are declared
abst Switch: On, Off
fun check(state): ## Bool
    | On  -> print 'On'
    | Off -> print 'Off'

# CHANGE REVERSE INDEXING AND STEP
ls = [4, 5, 2, 3, 7, 8]
ls[::-1] # reverse

# IIFE
(a:6, b:10) -> a + b


# 21/08/17
# Astro 0.1.05
# STRING FORMATTING
# padding
let formatted = '$:>10(string)'
let formatted = '$:<10(string)'
let formatted = '$:_<10(string)'
let formatted = '$:^10(string)'
# truncation
let formatted = '$:.10(string)'
# numbers
let formatted = '$:d(number)'
let formatted = '$:f(number)'
let formatted = '$:6.2f(number)'
let formatted = '$:+d(number)'
let formatted = '$:-f(number)'
let formatted = '$:=-5f(number)'
# date-time | custom objects
let formatted = '$:|Y-m-d H:M|(date)'


# SHORTENED CATCH
try dataFile <- open('map_scrape_data.csv', 'w'):
    let dataWriter = csv.writer dataFile
    dataWriter.writeRow data
catch fnfe ## FileNotFoundErr
# same as
catch fnfe: ## FileNotFoundErr
    print fnfe.msg

# PRINT STATEMENT (NO MORE -ln)
print 'Hello, world!'

# TYPE ANNOTATION (##)
fun gcd(n, m): ## T, T -> T = T<:Integer
    assert n && m != 0
    while m != 0:
        if m < n: swap(m, n)
    m = m % n
    n

# NO MORE ORDER SPECIFICATION IN GENERICS
type MyList: ## $T, l() = l::Int
    let list = List[T](l, 0)
    let size = l

# VALUE CONSTRAINT SYNTAX CHANGED
type MyList: ## T, l(1:10) = l::Int
    let list = List[T](l, 0)
    let size = l

# CHANGED WHERE SYNTAX AND $ OPTIONAL IF GENERICS TYPE IS SPECIFIED
fun min(a, b): ## T, T -> T = T<:Integer
    a if a <= b else b

fun min(a, b): ## $T, T -> T
    a if a <= b else b


# 19/08/17
# Astro 0.1.04
# IMPORT PATH
import selenium [webdriver]
import selenium/webdriver/support/ui [WebDriverWait]

# =====================================================

# 27/07/17
# Astro 0.1.03
# INDEXING
var list = [1, 2, 3, 4]
let a = list[:end] # beginning to end
let a = list[end-1] # last

# PROTOTYPE
var car = p_{ model: "Camaro", year: 2006 }
print car.model
car.new.make = "Shelby"

# 23/07/17
# Astro 0.1.01
# NESTED EXPRESSIONS
x if y == x else (y if y == z else z)

# TYPE CONVERSION FUNCTIONS
- camelCase names of types are now by convention meant for type conversion operations
type Int
fun int(float): #: F32
    int float

# 20/07/17
# Astro 0.1.0
# LIST COMPREHENSION
var l = [x | x <- [:200], even x]
var s = {x | x <- rand([:20]), even x}
var d = {x : y | x <- [:50], y <- [:x], even x}

<< block_expr
:  block_expr
<- block_expr
-> block_expr
(  block_expr)
{  block_expr}
[  block_expr]

# 19/07/17
# Astro 0.1.0
# LIST COMPREHENSION
let l = [x * y | x <- [:10], y <- [:x], x % 2 == 0]
let s = [x <- numStream()]

# IF | FOR | WHILE
if x <- value?:
    print x

for x <- [:20]:
    print x

while x < num:
    print x

# IMPORT | EXPORT
import state, tables
import math [sin, cos]
export math except [pi]

# MAIN FUNCTION
fun main():
    println "Hello world!"

# INDEXING
var x = y[:end]
var y = z[end:]

# BITWISE OPERATORS
var state = flag1 .band flag2
var state = flag1 .bor flag2

# INSTANCE TYPES
add(3, 4) :: Fun:(Int, Int) -> Int
car :: Car:{Str, Str, Int}

# PROPERTIES
var age = (age + 1) >> (age - 1)




-----------------------------------------------
# 18/07/17
# Astro 0.1.0
# MAIN FUNCTION
fun main():
    println('hello')
    scanln('> ')
    readln(fileObject)

# INDEXING
var x = y[:end]
var x = y[end:]

# LIST COMPREHENSION

# FOR (DEPRECATING WHILE)
for x << numStream():
    print x

foo( x, y = y, x )
foo( yield x * y for x, y <- [:10], numStream() if x % 2 == 0 )

var x, y = y, x

if x << getNumber():
    print x

for x, y << numStream(), boolStream():
    print x

for x != genNum():

redo:
    print x
for x == age

while x << numStream(): # unsupported
    print x

# COMPREHENSION NEEDS WORK

<< block_expr
:  block_expr
<- block_expr
-> block_expr
(  block_expr)
{  block_expr}
[  block_expr]

x << [:34]
x <- (x, y) << ([:34], [1:45]) if x == 25

(x, y, z) <-
    z, x, y <<
        [1:21], [1:z+1], [1:y+1]
    if x² * y² == z²

for_expr =
    | parens_expr for_head if_head? end_expr?

if_expr =
    | parens_expr if_head else_expr?

while_expr =
    | parens_expr while_head if_head? end_expr?

expr =
    | block_expr
    | parens_expr

parens_expr =
    | fix_expr
    | list_comp
    | atom

atom =
    | parens_atom
    | ...

parens_atom =
    | '(' IND (block_expr ) DED_START_DEFERRABLE ')'
    | '(' IND (long_expr | atom) DED_START_DEFERRABLE ')' // IGNORE_NL
    | '(' (long_expr | atom) ')' // IGNORE_NL

long_expr =
    | expr (';' expr)+

block_expr =
    | block_decl
    | block_cond

fun_call =
    | name '(' IND named_arg (',' named_arg)* DED_START_DEFERRABLE ')'  // IGNORE_NL
    | name '(' named_arg (',' named_arg)* ')' // IGNORE_NL
    | ...

DED =
    | DED_START
    | DED_INLN

DED_START =
    | DEDENT

DED_INLN =
    | '\\' NS  '\\'


match =
    |

list_comp =
    | (parens_expr '<' NS '-')? for_head_content (CNL? for_head_content)* (CNL? if_head)?
    | for_head_content (CNL? if_head)?

list_comp_block =
    |

iife =
    |

lambda =
    | ('|' params '|')? '-' NS '>' expr_or_block
    | '|' assign_pattern (',' assign_pattern)* '|' '-' NS '>' expr_or_block

import =
    | 'import' ('[' name (':' name)? (',' name (':' name)? )* ']')? ('except' '[' name (',' name )* ']')?

export =
    | 'export' ('[' name (',' name )*']')? ('except' '[' name (',' name )* ']')?


# 14/07/17
# Astro 0.1.0
# CONDITIONS
x == y || z
x == y or x == z

error
| TypeError || DomainError -> log(.issue)

# BITWISE
var state = flag1 &&& flag2

# 12/07/17
# Astro 0.1.0
# COMPREHENSION NEEDS WORK
sum( yield rand() < 0.5 for i << [:t] if i % 2 == 0 )
sum( rand() < 0.5 : i << [:t], i % 2 == 0 )

list(i << [:t])
dict((a,  b) << table if a == 5)
list(a * b <- (a, b) << table)

(x, y, z) <-
    z << [1:21]
    y << [1:z+1]
    x << [1:y+1]
    if x² * y² == z²

# INSTANCE TYPES
add(3, 4) :: Fun:(Int, Int) -> Int
car :: Car:{Str, Str, Int}

# IMPORT
import math
import math except [tan, atan]
import math [pi:π, cos, sin:sine]

# EXPORT
export math except [cos, sin]

# 11/07/17
# Astro 0.1.0
# IIFE
(2:a, 5:b) -> a + b

() ->
    if toks.parseString("{").success:
        if toks.|parseString(":") & parseString("}")|.!success:
            return { success: true, ast: null, lastPointerPos: null, name: null, problem: null }
        doSome stuffs

# GET//SET
var prop = (prop) ~> (prop)

# Returning Nothing
fun print(point): #: -> None
    print point.|a, b|

# 06/07/17
# Astro 0.1.0
if parseResult = parsePASS(), if parseResult.success:
    print "Parser successful  == [parseResult.success]"

if (var parseResult = parsePASS(); =>success):
    print "Parser successful == [parseResult.success]" # error, parseResult not accessible


# Astro 0.1.0
# IIFE // DEPRECATED
var x = (|a, b| -> a + b)(2, 3)

var x = |2, 3| -> $1 + $2 # literals and outers
var x = |2, getValue(x)| -> $1 + $2 # literals and outers

# 03/07/17
# Astro 0.1.0
# IIFE
var x = (|a, b| -> a + b)(2, 3)

var x = |2, 3| -> $1 + $2 # literals and outers

# UNIICODE MATH SYNTAX PROPOSAL
var calc = { 2x / 56y }f

# 01/07/17
# Astro 0.1.0
# RETURN NOTHING
fun print(object): #: -> Nada
    print object.|id, position|

# NS LITERAL
let spMatrix = 2x2 [Int] sp_[]

# NESTED DESTRUCTURING  (REJECTED)
let {a: {b}, c} = dict
var [a, [b], c] = list
var {a, {b}, c} = set

# REMOVED RHS var and let
let x = const [1, 2, 3, 4]

# BITWISE OPERATORS
band
bor
bnot
bxor
bshl
bshr

# 29/06/17
# Astro 0.1.0
# LIST FIELD GENERATOR SYNTAX
let students = getStudentList()
let totalGpas = students.@gpa.sum()

fun average(students):
    students.|@gpa.sum() / size|

# CHANGE DICTIONARY VALUE ACCESS SYNTAX
fun set(a, b): pass #: $T

type Foo:
    var set = {Int: add(_, 5)}

var object = Foo()

object.set[Int](x)
object.set{Int}(x)
# IMPORTING
import
    math.{pi, cos, tan}
    math.{_} # import all
    game.{physics, events no lighting} # don't import
    plant.{Apple as ap, Mango as mg}  # import as
    src.com.appy.android.{MainActivity} # follow path from src


# 28/06/17
# Astro 0.1.0
# IMPORTING
import
    math.[pi, cos, tan]
    math.[_]
    game.[physics, events no lighting]
    plant.[Apple as ap, Mango as mg]
    src.com.appy.android.[MainActivity]

# TUPLES BACK!
# tuple is a datatype whose element types and length are determined statically
# you can't do much with tuples except to pass them around. You can't appended to or removed from
let tuple = (1, 2, "Hi")

# DESTRUCTURING REDESIGNED
let [name, age, _, ...rest]  = list
let (name, age, _, ...rest)  = tuple
let {name, age, _, ...rest}  = dict
let {name, age, _, ...rest}  = set
let [first|last] = list
let (first|last) = tuple
let {first|last} = dict
let {first|last} = set
let {key:value}  = dict

# FUNCTIONS CAN ONLY TAKE TUPLES
fun check(f, ...args):
    let test = f(...args[:-2]) == args[-1]
    println 'Test passed' if test else >> 'Test failed'

check(add, 5, 3, 8)
check(sub, ...list) # error!

# APPLICATION PIPING
add(2, 3) |> sub(_, 5) |> div(2, _)

fun |>(f, x): #@ infixl(5)
    f(a)

# 27/06/17
# Astro 0.1.0
# PARTIAL FUNCTIONS
list.map mul(_, 5)

# DEFAULT VALUES
fun createAccount(name:"demo", password:"demo"):
    accountFactory(name, password)

createAccount(password:"Logic404")

# VECTORIZATION
vector .cross.. matrix

# CHAR AND ASCII TYPE, NO MORE CHARS
let pi  = ch_"π"
let euler = as_"e"

fun getPerson(): # -> Dict[Str, _]
    return { name:"James", age:56, gender:"Male" }

# '!' OPERATOR POSITIONING
x.!isRound
x !in y
!x?
!(x.hasValue(y))

# NO MORE TUPLES
var a, b = 5, 6

fun john(name, age):
    name, age

# RANGE NOT INCLUSIVE
var range = [:10] # 0 to 9


# 26/06/17
# Astro 0.1.0
let x, y = z, a = 5, b # Removed!

# 25/06/17
# Astro 0.1.0
# FUNCTION OF A FUNCTION
fun vecr(f, scalar, list):
    list.map->(f(scalar, $1))

dot.vecr(matA, matB) # deprecatable
vecr(dot, matA, matB)
matA.dot.vecr(matB)

[].join.toEach(list)

# GETTER SETTER SYNTAX PROPOSAL
var age  = (age + 5) -> (age - 5)
var name = (name) -> (name + "Smith")
var date = (date) -> ()

# adjustments to make
- identifier section. [DONE]
    fun createMeme():
        println memes[rand()]

- in values and reference section, remove [DONE]
    let library = acq
  a subject assignment type cannot be pre-declares

- in for loop section, remove [DONE]
    for var i <- ...

- correct all occurrences of 'for .. = ..' [DONE]

- edit value constraint [DONE]

- edit generic parameter order syntax [DONE]

- add to grammar [DONE]
    :=
    +=

- add rxn as keyword [DONE]

- the nil operators can be placed infront of a function identifier with a brackeless call [DONE]
    let x = getX(name, age)?
    let y = getY? name

- single-line comment ends at newline or ; [DONE]

- instantiating coroutine.  [DONE]
    var x = coroutine(2, 5)

- edit error coalescing [DONE]
    var x = getValue() !! 78

- exhaustive pattern match with if [DONE]
    value
    | TypeB(s1, s2) if |s1 == s2|.length -> println(s1 + s2)

- change lazy assignment to lazy subject declaration. [DONE]

- change setter/getter syntax. [DONE]
    from:
    var age = set: age + 5 \\ get: age - 5
    var name = set: name \\ get: name + "Smith"
    var date = set: date
    to:
    var age  = (age + 5) -> (age - 5)
    var name = (name) -> (name + "Smith")
    var date = (date) -> ()

- add ', NL? |NL ,?' to section 'where used'. list, dict, enums, chainedconditionalconstruct [DONE]

- remove vectorization syntactic sugar from the language, and added
- new function of function syntax that makes vectorization possible [DONE]
    fun vecr(f, scalar, list):
        list.map->(f(scalar, $1))

    dot.vecr(matA, matB)
    vecr(dot, matA, matB)
    matA.dot.vecr(matB)

- a function can call itself with 'fn' keyword [DONE]

- check commits for updates made to the language [DONE]

- add to 'what if astro had braces' section [DONE]
    var students = getStudentList()
    students.{gpa}.map->($1 + 1)

# 22/06/17
# Astro 0.1.0
# CACHED EXPRESSION PROPOSAL (REJECTED) # compiler can optimize it away
# expressions in a loop that don't change during iteration
# can be cached for reuse
students.count->$1 >= `average(students)

# LIST FIELD
students.|{gpa}.sum() / size|

# MUTABLE / IMMUTABLE OBJECTS
var name = let Name('Steve', 'Akin')
let list = var [1, 2, 3, 4]

# LAZY ASSIGNMENT
var lazyNum := 45
...
lazyNum := 67

# COMPREHENSION PATTERN MATCHING
    [i] << i <- [1:20]
  {i:5} << i <- [1:20]
   (i,) << i <- [1:20]
 Set(i) << i <- [1:20]

# ERROR COALESCING
let x = getSomething() !! ->(| Error -> .printTrace())

# DO NOTHING
fun add(a, b): pass
if a == y: pass

# DO IF MATCH
print(.name) if person.name
| 'Steve'
| 'John'

# REUSE PATTERN
let x = 0
if $x = getValue():
    println x

# 15/06/17
# Astro 0.1.0
# GENERICS. POSSIBLY THE SAME TYPE
#: !T, !U -> T|U
fun max(a, b): a if a > b else b

# 13/06/17
# Astro 0.1.0
# DEFER
var file = open('file.txt')
defer: file.close

# 13/06/17
# Astro 0.1.0
# PROPOSED REST SYNTAX (REJECTED)
[head, _tail] = list

# 10/06/17
# Astro 0.1.0
# NIL MARKERS # DONE
getData!('abc')
getData?('abc')

# ANONYMOUS FUNCTIONS # DONE
var add = fun (a, b): a + b
# NON-STANDARD LITERAL # DONE
let x = set_[1, 2, 3]

let car = struct_{
    name: 'Shelby Camaro',
    make: 'Chevrolet'
}
# ARROW NOTATION # DOC
playlist =>play() =>shuffle()
# EXPORT # DOC
export
    add #: Int, Int -> Int
    Person #: Str, Str, Int
# ACCESS MODIFIERS # DONE
type Employee`(!job`, !age`) <: Person
fun add`(a, b): a + b
# MUTATION # DONE
fun sort(!list)
fun swap(!a, !b):
    a, b = b, a;
# BRACKETLESS CALL # DONE
- BRINSL (boolean, regex, indentifier, number, string, lambda)
# PROTOTYPE # DONE
var dude = { name: 'Sonny', age: 16 }
dude.new.gender = 'male'
dude.new.job = anotherDude.job
dude.inc.move = |source, destination| =
    println 'Moved from $source to $destination'
# USING SUBJECTS FROM OUTSIDE # DONE
var person = { $attrib1: 'John', $attrib2: 25 }
var playing = "playing $song..."
object
| $something -> println "$attrib1 is [getname(object)]"
# IIFE # DONE
|10| = 1 if $1 == 0 else fn($1 - 1)
# TERNARY CONDITION EXPRESSION # DONE
stop music if music.playing else play music
# SINGLETONS # DONE
button.setOnClick(obj <: OnClick:
    fun onClick(self, view):
        println "Button clicked!"
)
# DESTRUCTURING LAMBDA # DONE
list.map |(x, y)| = x * y
# LAMBDA REDESIGN # DONE
list.fold(0, |x, y| = x + y)
list.fold(0) |x, y| = x + y
list.fold(0, =$1 + $2)

fun vowels(word) = word.filter(=$1 in "aeiouAEIOU").size

var castle = |a, b| =
    exec(a, b)

var castle = (=exec())

# 02/06/17
# Astro 0.1.0
# LAMBDA REVISITED
20.each || -> println "Hello"

list.map |x| -> x * x

fun check(x) = |x.id| ->
    | 'Don': 2
    | 'Dan': 1

fun four = 2 * 2

# WHEN REVISITED
return _ when x
| 1: '1'
| 2: '2'
| 3: '3'

print(_) when x
| 1: x
| 2: x
| 3: x

# 01/06/17
# Astro 0.1.0
# MATCH BLOCK REVISITED
while turn != 'y' or 'Y' or 'n' or 'N':
    | 'y' or 'Y': return 1
    | 'n' or 'N': return 0
    | _         : print "its an invalid choice."

fun palingram(word):  #: Str
    | .size() == set(word).size(): "isogram"
    | word[-1:]                  : "palindrome"
    | _                          : "nothing"

fun compare(a, b):
    ~ a == b: 'eq'
    ~ a != b: 'ne'
    ~ a > b : 'gt'
    ~ a < b : 'lt'
    ! a > b : 'le'
    ! a < b : 'ge'
