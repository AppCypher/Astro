# NAMES
CXX := clang++
PROGRAM_NAME := astro_llvm_codegen

# COMPILER FLAGS
INCLUDE_FLAGS := -I../../../include
STD_FLAG := -std=c++14
LLVM_CONFIG_COMMAND := ~/Desktop/Build/llvm-build/bin/llvm-config
LLVM_CXX_FLAGS := $(shell $(LLVM_CONFIG_COMMAND) --cxxflags)
LLVM_LIB_FLAGS := $(shell $(LLVM_CONFIG_COMMAND) --libs)
LLVM_SYSTEM_LIB_FLAGS := $(shell $(LLVM_CONFIG_COMMAND) --system-libs)
LLVM_LD_FLAGS := $(shell $(LLVM_CONFIG_COMMAND) --ldflags)
OBJECT_COMPILATION_FLAGS := $(STD_FLAG) $(INCLUDE_FLAGS) $(LLVM_CXX_FLAGS)
EXECUTABLE_COMPILATION_FLAGS := $(LLVM_SYSTEM_LIB_FLAGS) $(LLVM_LD_FLAGS) $(LLVM_LIB_FLAGS)

# DIRECTORIES
SOURCE_DIR := ./llvm
DIST_DIR := ../dist
BUILD_DIR := $(DIST_DIR)/build

# FILES
SOURCE_FILES := $(wildcard $(SOURCE_DIR)/*.cpp)
OBJECT_FILES := $(addprefix $(BUILD_DIR)/, $(notdir $(SOURCE_FILES:%.cpp=%.o)))
EXECUTABLE_FILE := $(DIST_DIR)/$(PROGRAM_NAME)

# COMMANDS
CREATE_BUILD_DIR := mkdir -p $(BUILD_DIR)
COMPILE_SOURCE_FILES_TO_OBJECT_FILES = $(CXX) $(OBJECT_COMPILATION_FLAGS) $< -c -o $@
COMPILE_OBJECT_FILES_TO_EXECUTABLE_FILE := $(CXX) $(EXECUTABLE_COMPILATION_FLAGS) $(OBJECT_FILES) -o $(EXECUTABLE_FILE)

# Create a build directory
$(shell $(CREATE_BUILD_DIR))

$(BUILD_DIR)/%.o: $(SOURCE_DIR)/%.cpp
	$(COMPILE_SOURCE_FILES_TO_OBJECT_FILES)

$(EXECUTABLE_FILE): $(OBJECT_FILES)
	echo "$(SOURCE_FILES)"
	echo "$(OBJECT_FILES)"
	$(COMPILE_OBJECT_FILES_TO_EXECUTABLE_FILE)

build: $(EXECUTABLE_FILE)

clean:
	rm -rf -f $(DIST_DIR)
	$(CREATE_BUILD_DIR)

run:
	$(EXECUTABLE_FILE)

all: clean build clean run
