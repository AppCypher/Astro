eoi =
  | !.

digitbinary =
  | [0-1]

digitoctal =
  | [0-7]

digitdecimal =
  | [0-9]

digithexadecimal =
  | [0-9a-fA-F]

integerbinaryliteral =
  | '0b' digitbinary ('_'? digitbinary)*
  { type, value }

integeroctalliteral  =
  | '0o' digitoctal ('_'? digitoctal)*
  { type, value }

integerhexadecimalliteral  =
  | '0x' digithexadecimal ('_'? digithexadecimal)*
  { type, value }

integerdecimalliteral  =
  | digitdecimal ('_'? digitdecimal)*
  { type, value }

integerliteral =
  | integerbinaryliteral
  | integeroctalliteral
  | integerhexadecimalliteral
  | integerdecimalliteral // Can eat others cake
  { type, value }

floatbinaryliteral  =
  | '0b' digitbinary ('_'? digitbinary)* '.' digitbinary ('_'? digitbinary)* ('e' [-+]? digitbinary ('_'? digitbinary)*)?
  | '0b' digitbinary ('_'? digitbinary)* 'e' [-+]? digitbinary ('_'? digitbinary)*
  { type, value }

floatoctalliteral  =
  | '0o' digitoctal ('_'? digitoctal)* '.' digitoctal ('_'? digitoctal)* ('e' [-+]? digitoctal ('_'? digitoctal)*)?
  | '0o' digitoctal ('_'? digitoctal)* 'e' [-+]? digitoctal ('_'? digitoctal)*
  { type, value }

floathexadecimalliteral  =
  | '0x' digithexadecimal ('_'? digithexadecimal)* '.' digithexadecimal ('_'? digithexadecimal)* ('p' [-+]? digithexadecimal ('_'? digithexadecimal)*)?
  | '0x' digithexadecimal ('_'? digithexadecimal)* 'p' [-+]? digithexadecimal ('_'? digithexadecimal)*
  { type, value }

floatdecimalliteral  =
  | (digitdecimal ('_'? digitdecimal)*)? '.' digitdecimal ('_'? digitdecimal)* ('e' [-+]? digitdecimal ('_'? digitdecimal)*)?
  | digitdecimal ('_'? digitdecimal)* 'e' [-+]? digitdecimal ('_'? digitdecimal)*
  { type, value }

floatliteral =
  | floatbinaryliteral
  | floatoctalliteral
  | floathexadecimalliteral
  | floatdecimalliteral // Can eat others cake
  { type, value }

numericliteral =
  | floatliteral
  | integerliteral  // Can eat others cake
  { type, value }

coefficientexpression = // Unfurl
  | floatbinaryliteral identifier
  | floatoctalliteral identifier
  | floatdecimalliteral identifier
  | integerbinaryliteral identifier
  | integeroctalliteral identifier
  | !('0b' | '0o' | '0x') integerdecimalliteral identifier // Accepts others failed cake, e.g. will parse 0b01 as '0' and 'b01'. Rectified with predicate.
  { type, coefficient, identifier }

noname =
  | '_'

identifierbeginchar =
  | [a-zA-Z_] // TODO

identifierendchar =
  | identifierbeginchar
  | digit

identifier =
  | identifierbeginchar identifierendchar* // Contains keyword check
  { type, name }

operatorchar =
  | [+\-*/\\^%!><=÷×≠≈¹²³√]// TODO

operator =
  | (!(regexliteral) operatorchar)+ // Must not consume regexliteral
  { type, name }

importnamechar =
  | identifierendchar | [\-] // TODO

charsnonewlineorsinglequote =
  | (!(newline | "'") .)+ // TODO
  { token }

charsnonewlineordoublequote =
  | (!(newline | '"') .)+ // TODO
  { token }

charsnonewlineortriplesinglequote =
  | (!(newline | "'''") .)+ // TODO
  { token }

charsnonewlineortripledoublequote =
  | (!(newline | '"""') .)+ // TODO
  { token }

charsnohashequal =
  | (!('#=' | '=#') .)+ // TODO
  { token }

charsnonewline =
  | (!(newline) .)+ // TODO
  { token }

charsnonewlineorforwardslash =
  | (!(newline | '/') .)+ // TODO
  { token }

space =
  | [ \t]

indent = // TODO. adding !space
  | ' '+
  { level }

samedent = // TODO. adding !space
  | ' '+
  | ''
  { level }

dedent = // TODO. adding !space
  | ' '+
  { level }

newline =
  | '\r'? '\n'

nextline =
  | newline (_? newline)*

singlelinecomment =
  | "#" charsnonewline? &(newline | eoi)
  { type, token }

innermultilinecomment =
  | "#=" charsnohashequal? (innermultilinecomment charsnohashequal?)* '=#'
  { type, token }

multilinecomment =
  | "#=" charsnohashequal? (innermultilinecomment charsnohashequal?)* '=#' _? &(newline | eoi)
  { type, token }

comment =
  | multilinecomment
  | !('#=') singlelinecomment // Accepts others failed cake. Rectified with predicate.

nextcodeline =
  | space* nextline (samedent comment (nextline | &eoi))*
  { comments }

dedentoreoiend =
  | nextcodeline dedent
  | nextcodeline? _? eoi
  { comments }

linecontinuation =
  | space* '...' space* nextline samedent

spaces =
  | space+

_ =
  | linecontinuation
  | &{ignorenewline} nextcodeline samedent
  | space+ // Can eat others cake

booleanliteral =
  | 'true'
  | 'false'
  { type, value }

singlelinestringliteral =
  | "'" charsnonewlineorsinglequote? "'"
  | '"' charsnonewlineordoublequote? '"'
  { type, token }

multilinestringliteral =
  | "'''" charsnonewlineortriplesinglequote? (nextline samedent charsnonewlineortriplesinglequote?)* "'''"
  | '"""' charsnonewlineortripledoublequote? (nextline samedent charsnonewlineortripledoublequote?)* '"""'
  { type, token }

stringliteral =
  | multilinestringliteral
  | singlelinestringliteral // Can eat others cake
  { type, token }

regexliteral =
  | '/' charsnonewlineorforwardslash? '/'
  { type, token }

_comma =
  | _? ','

listarguments =
  | primitiveexpression (_comma _? primitiveexpression)* _comma?
  { expressions }

listargumentsmultiple =
  | listliteral (nextcodeline samedent listliteral)+
  | listarguments (_? ';' _? listarguments)+ (_? ';')?
  | listarguments (_? ';')?
  { expressions }

listliteral =
  | '[' _? ']' // ignorenewline
  | '[' spaces? listargumentsmultiple _? ']' // ignorenewline
  | '[' nextcodeline indent listargumentsmultiple nextcodeline dedent ']'
  { type, expressions }

objectargument =
  | identifier _? ':' _? objectblock &(primitiveexpression | '}')
  | identifier _? ':' _? primitiveexpression &(_comma | nextcodeline _? | _? '}')
  | identifier &(_comma | nextcodeline _? | _? '}')
  { key, value }

objectblock =
  | nextcodeline indent objectarguments nextcodeline dedent
  { type, expressions: [{ key, value }] }

objectliteral =
  | '{' _? '}' // ignorenewline
  | '{' spaces? objectarguments _? '}' // ignorenewline
  | '{' nextcodeline indent objectarguments nextcodeline dedent '}'
  { type, expressions: [{ key, value }] }

dictargument =
  | primitiveexpression _? ':' _? objectblock &(primitiveexpression | '}')
  | primitiveexpression _? ':' _? (subdictliteral | primitiveexpression) &(_comma | nextcodeline _? | _? '}')
  | identifier &(_comma | nextcodeline _? | _? '}')
  { key, value }

dictarguments =
  | dictargument ((_comma _? | nextcodeline samedent)? dictargument)* _comma?
  { expressions: [{ key, value }] }

dictliteral =
  | '@' '{' _? '}' // ignorenewline
  | '@' '{' spaces? dictarguments _? '}' // ignorenewline
  | '@' '{' nextcodeline indent dictarguments nextcodeline dedent '}'
  { type, expressions: [{ key, value }] }

setarguments =
  | primitiveexpression (_comma _? primitiveexpression)* _comma?
  { expressions }

setliteral =
  | '%' '{' _? '}' // ignorenewline
  | '%' '{' spaces? setarguments _? '}' // ignorenewline
  | '%' '{' nextcodeline indent setarguments nextcodeline dedent '}'
  { type, expressions }

tuplearguments =
  | primitiveexpression (_comma _? primitiveexpression)+ _comma?
  | primitiveexpression _comma
  { expressions }

tupleliteral =
  | '(' _? ')' // ignorenewline
  | '(' spaces? tuplearguments _? ')' // ignorenewline
  | '(' nextcodeline indent tuplearguments nextcodeline dedent ')'
  { type, expressions }

namedtuplearguments =
  | identifier _? ':' _? primitiveexpression (_comma _? identifier _? ':' _? primitiveexpression)* _comma?
  { expressions: [{ key, value }] }

namedtupleliteral =
  | '(' _? ':' _?  ')' // ignorenewline
  | '(' spaces? namedtuplearguments _? ')' // ignorenewline
  | '(' nextcodeline indent namedtuplearguments nextcodeline dedent ')'
  { type, expressions: [{ key, value }] }

symbolliteral =
  | '$' identifier
  | '$' '(' _? expression _? ')' // ignorenewline
  | '$' '(' block ')'
  { type, expressions }

listcomprehension =
  | '[' _? primitiveexpression _? '|' _? forhead (_? ';' _? forhead)* (_ 'where' _ primitiveexpression)? _? ']' // ignorenewline
  { type, expression, iterators:[{ lhs, rhs}], guard }

dictcomprehension =
  | '@' '{' _? (primitiveexpression _? ':' _? primitiveexpression | identifier) _? '|' _? forhead (_? ';' _? forhead)* (_ 'where' _ primitiveexpression)? _? '}' // ignorenewline
  { type, key, value, iterators:[{ lhs, rhs}], guard }

setcomprehension =
  | '%' '{' _? primitiveexpression _? '|' _? forhead (_? ';' _? forhead)* (_ 'where' _ primitiveexpression)? _? '}' // ignorenewline
  { type, key, value, iterators:[{ lhs, rhs}], guard }

comprehension =
  | listcomprehension
  | dictcomprehension

literal =
  | numericliteral
  | booleanliteral
  | stringliteral
  | regexliteral
  | listliteral
  | objectliteral
  | dictliteral
  | setliteral
  | tupleliteral
  | namedtupleliteral
  | symbolliteral
  | comprehension

callarguments =
  | (identifier _? ':' _?)? primitiveexpression (_comma _? (identifier _? ':' _?)? primitiveexpression)* _comma?
  { expressions: [{ key, value }] }

callpostfix =
  | spaces? ('!' spaces?)? '.'? '(' _? ')' // ignorenewline
  | spaces? ('!' spaces?)? '.'? '(' spaces? callarguments _? ')' // ignorenewline
  | spaces? ('!' spaces?)? '.'? '(' nextcodeline indent callarguments nextcodeline dedent ')'
  { type, expression, mutative, vectorized, arguments: [{ key, value }] }

dotnotationpostfix =
  | spaces? '.' identifier
  { type, expression, field }

cascadenotationargument =
  | (callpostfix | indexpostfix | spaces? '.' identifier) (spaces? '?')? (subatompostfix (spaces? '?')?)*

cascadenotationarguments =
  | cascadenotationargument (_comma _? cascadenotationargument)+ _comma?
  | cascadenotationargument _ ('.'? operator | keywordoperator) _ (cascadenotationarguments | cascadenotationargument)

cascadenotationpostfix = // Unfurl
  | spaces? '.' '{' spaces? cascadenotationarguments _? '}' // ignorenewline
  | spaces? '.' '{' nextcodeline indent cascadenotationarguments nextcodeline dedent '}'
  { type, expression, cascadeaccess }

indexargument =
  | (primitiveexpression _?)? ':' (_? primitiveexpression? _? ':')? _? primitiveexpression?
  | primitiveexpression
  { index, begin, step, end }

indexarguments =
  | indexargument (_comma _? indexargument)* _comma?
  { expressions: [{ index, begin, step, end }] }

indexpostfix =
  | spaces? '[' spaces? indexarguments _? ']' // ignorenewline
  | spaces? '[' nextcodeline indent indexarguments nextcodeline dedent ']'
  { type, expression, arguments: [{ key, value }] }

ternaryoperator =
  | '(' spaces? primitiveexpression _? ')' _? '?' _? primitiveexpression _? ':' _? primitiveexpression  // ignorenewline
  | '(' nextcodeline indent primitiveexpression nextcodeline dedent ')' _? '?' _? primitiveexpression _? ':' _? primitiveexpression
  { type, condition, truebody, falsebody }

controlkeyword =
  | 'return'
  | 'yield'
  | 'raise'
  | 'continue'
  | 'break'
  | 'spill'

return =
  | 'return' (!(_ controlkeyword _) _ expressionnocontrolptimitive)?
  { type, expression }

yield =
  | 'yield' ((_ 'from')? !(_ controlkeyword _) _ expressionnocontrolptimitive)?
  { type, expression, redirect }

raise =
  | 'raise' (_ !(_ controlkeyword _) _ expressionnocontrolptimitive)?
  { type, expression }

continue =
  | 'continue' (_ '@' identifier)?
  { type, label }

break =
  | 'break' (!(_ controlkeyword _)_ expressionnocontrolptimitive)?  (_ '@' identifier)?
  { type, expression, label }

spill =
  | 'spill' (_ '@' identifier)?
  { type, label }

controlprimitive =
  | return
  | yield
  | continue
  | break
  | raise
  | spill

subatompostfix =
  | callpostfix
  | dotnotationpostfix
  | cascadenotationpostfix
  | indexpostfix

subatom =
  | '(' spaces? simpleexpression _? ')' identifier? // ignorenewline
  | '(' nextcodeline indent simpleexpression nextcodeline dedent ')' identifier?
  | coefficientexpression
  | literal
  | noname
  | identifier
  | operator

atom =
  | subatom (spaces? '?')? (subatompostfix (spaces? '?')?)*
  { type, expression }

prefixatom =
  | operator atom

postfixatom =
  | atom '.'? operator

prepostfixatom =
  | prefixatom
  | postfixatom
  | atom

keywordoperator =
  | 'is' _ 'not'
  | 'in'
  | 'not' _ 'in'
  | 'mod'
  | 'is'
  { type, name }

infixexpression =
  | (prefixatom | atom) '.'? operator (infixexpression | prepostfixatom)
  | prepostfixatom _ ('.'? operator | keywordoperator) _ (infixexpression | prepostfixatom)
  { type, expressions, operators }

spreadexpression =
  | '...' atom
  { type, expression }

range =
  | ((infixexpression | prepostfixatom) _?)? '..' (_? (infixexpression | prepostfixatom) _? '..')? _? (infixexpression | prepostfixatom)
  { type, begin, step, end }

commandnotationrest =
  | spaces &(identifier | stringliteral | numericliteral | range | symbolliteral) primitiveexpression
  | spaces? lambdaexpression
  { arguments: [{ key, value }] }

commandnotation =
  | !(operator) atom (spaces? '?')? (spaces? '!')? commandnotationrest
  { type, expression, mutative, arguments: [{ key, value }] }

primitiveexpression =
  | spreadexpression
  | range
  | infixexpression
  | commandnotation
  | prepostfixatom

simpleexpression =
  | ternaryoperator
  | primitiveexpression

tupleexpression =
  | simpleexpression (_comma _? simpleexpression)+ _comma?
  | simpleexpression

dotnotationline =
  | dotnotationpostfix (spaces? '?')? (subatompostfix (spaces? '?')?)*

dotnotationblock =
  | simpleexpression nextcodeline indent dotnotationline (nextcodeline samedent dotnotationline) dedentoreoiend
  { type, expression, lines }

subexpression =
  | dotnotationblock
  | declaration
  | conditionalexpression
  | controlprimitive
  | tupleexpression

expression =
  | subexpression (_? ';' _? subexpression)+ (_? ';')?
  | subexpression

// Used in declarations and conditional expressions.
// allows
// - `primitiveexp`
// does not allow
// - `if ... : exp`
// - `if ... : exp else: exp`
subexpressionnoblock =
  | controlprimitive
  | tupleexpression

expressionnoblock =
  | subexpressionnoblock (_? ';' _? subexpressionnoblock)+ (_? ';')?
  | subexpressionnoblock

// Used in declarations and conditional expressions.
// allows
// - `if ... : block`
// - `if ... : noblock`
// - `if ... : noblock else: noblock`
// does not allow
// - `if ... : for ... : exp`
// - `if ... : for ... : exp else ... : exp`
subexpressionsecondinline =
  | dotnotationblock
  | declarationsecondinline
  | conditionalexpressionsecondinline
  | controlprimitive
  | tupleexpression

expressionsecondinline =
  | subexpressionsecondinline (_? ';' _? subexpressionsecondinline)+ (_? ';')?
  | subexpressionsecondinline

block =
  | nextcodeline indent expression (nextcodeline samedent expression)* dedentoreoiend

lhsname
  | noname
  | identifier
  | '...' identifier?

lhsarguments =
  | lhsname (_comma _? lhsname)* _comma?
  { expressions }

lhspattern =
  | '[' spaces? lhsarguments _? ']' // ignorenewline
  | '[' nextcodeline indent lhsarguments nextcodeline dedent ']'
  | '{' spaces? lhsarguments _? '}' // ignorenewline
  | '{' nextcodeline indent lhsarguments nextcodeline dedent '}'
  | '(' spaces? lhsarguments _? ')' // ignorenewline
  | '(' nextcodeline indent lhsarguments nextcodeline dedent ')'
  |  lhsname (_comma _? lhsname)*
  { destructuretype, arguments }

guard =
  | _ 'where' _ primitiveexpression
  { condition }

ifheaddeclaration =
  | subjecthead (_ '=' _ | '=' !operator) !(controlkeyword) tupleexpression
  { immutable, lhs, value }

ifhead =
  | (ifheaddeclaration | primitiveexpression) guard?
  { head, guard }

ifexpression =
  | 'if' _ ifhead _? ':' _? subexpressionnoblock _ elseexpressionsecondinline
  | 'if' _ ifhead _? ':' _? subexpressionsecondinline (nextcodeline samedent elifexpression* elseexpression)?
  | 'if' _ ifhead _? ':' block (elifexpression* elseexpression)?
  { type, head, guard, body, elifs, elsebody }

ifexpressionsecondinline =
  | 'if' _ ifhead _? ':' _? subexpressionnoblock
  | 'if' _ ifhead _? ':' block
  { type, head, guard, body, elifs, elsebody }

elifexpression =
  | 'elif' _ ifhead _? ':' _? subexpressionsecondinline nextcodeline samedent
  | 'elif' _ ifhead _? ':' block
  { head, guard, body }

elseexpression =
  | 'else' _? ':' _? subexpressionsecondinline
  | 'else' _? ':' block
  { body }

elseexpressionsecondinline =
  | 'else' _? ':' _? subexpressionnoblock
  | 'else' _? ':' block
  { body }

whileexpression =
  | 'while' _ ifhead _? ':' _? subexpressionnoblock _ endexpressionsecondinline
  | 'while' _ ifhead _? ':' _? subexpressionsecondinline (nextcodeline samedent endexpression)?
  | 'while' _ ifhead _? ':' block endexpression?
  { type, head, guard, body, endbody }

whileexpressionsecondinline =
  | 'while' _ ifhead _? ':' _? subexpressionnoblock
  | 'while' _ ifhead _? ':' block
  { type, head, guard, body, endbody }

endexpression =
  | 'end' _? ':' _? subexpressionsecondinline
  | 'end' _? ':' block
  { body }

endexpressionsecondinline =
  | 'end' _? ':' _? subexpressionnoblock
  | 'end' _? ':' block
  { body }

dowhileexpression =
  | 'do' _? ':'  _? subexpressionsecondinline _? 'while' _ ifhead
  | 'do' _? ':' block 'while' _ ifhead
  | 'do' _? ':' subexpressionnoblock 'while' _ ifhead
  { type, head, guard, body }

loopexpression =
  | 'loop' _? ':' _? subexpressionnoblock _ endexpressionsecondinline
  | 'loop' _? ':' _? subexpressionsecondinline (nextcodeline samedent endexpression)?
  | 'loop' _? ':' block endexpression?
  { type, body, endbody }

loopexpressionsecondinline =
  | 'loop' _? ':' _? subexpressionnoblock
  | 'loop' _? ':' block
  { type, body, endbody }

forhead =
  | ('var' _)? lhspattern _ 'in' _ primitiveexpression (_ 'where' _ primitiveexpression)?
  { immutable, lhs, value, guard }

forexpression =
  | 'for' _ forhead _? ':' _? subexpressionnoblock _ endexpressionsecondinline
  | 'for' _ forhead _? ':' _? subexpressionsecondinline (nextcodeline samedent endexpression)?
  | 'for' _ forhead _? ':' block endexpression?
  { type, head, guard, body, endbody }

forexpressionsecondinline =
  | 'for' _ forhead _? ':' _? subexpressionnoblock
  | 'for' _ forhead _? ':' block
  { type, head, guard, body, endbody }

tryexpression =
  | 'try' _? ':' _? subexpressionnoblock _ exceptexpressionsecondinline
  | 'try' _? ':' _? subexpressionsecondinline nextcodeline samedent exceptexpression+ ensureexpression?
  | 'try' _? ':' block exceptexpression+ ensureexpression?
  | 'try' _ ('var' _)? lhspattern (_ '=' _ primitiveexpression | '=' !(operator) primitiveexpression) ':' _? subexpressionnoblock exceptexpressionsecondinline
  | 'try' _ ('var' _)? lhspattern (_ '=' _ primitiveexpression | '=' !(operator) primitiveexpression) ':' _? subexpressionsecondinline (_? exceptexpression)+ (_? ensureexpression)?
  | 'try' _ ('var' _)? lhspattern (_ '=' _ primitiveexpression | '=' !(operator) primitiveexpression) ':' block (_? exceptexpression)+ (_? ensureexpression)?

ensureexpression =
  | 'ensure' _? ':' _? subexpressionsecondinline
  | 'ensure' _? ':' block

exceptexpression =
  | 'except' _ identifier _? ':' _? subexpressionsecondinline
  | 'except' _ identifier _? ':' block

exceptexpressionsecondinline =
  | 'except' _ identifier _? ':' _? subexpressionnoblock
  | 'except' _ identifier _? ':' block

matchargument
  | identifier _? ':' _? primitiveexpression
  | noname
  | identifier
  | '...' identifier?

typerelationoperator =
  | _ ('::' | '<:' | '>:') _
  | ('::' | '<:' | '>:') !operator

matchpattern =
  | '[' spaces? matchargument (_comma _? matchargument)* _comma? _? ']' // ignorenewline
  | '[' nextcodeline indent  matchargument (_comma _? matchargument)* _comma? nextcodeline dedent ']'
  | '{' spaces? matchargument (_comma _? matchargument)* _comma? _? '}' (typerelationoperator identifier)? // ignorenewline
  | '{' nextcodeline indent matchargument (_comma _? matchargument)* _comma? nextcodeline dedent '}' (typerelationoperator identifier)?
  | '%' '{' spaces? matchargument (_comma _? matchargument)* _comma? _? '}' // ignorenewline
  | '%' '{' nextcodeline indent matchargument (_comma _? matchargument)* _comma? nextcodeline dedent '}'
  | '@' '{' spaces? matchargument (_comma _? matchargument)* _comma? _? '}' // ignorenewline
  | '@' '{' nextcodeline indent matchargument (_comma _? matchargument)* _comma? nextcodeline dedent '}'

matchexpression =
  | ('|' | '!') _? matchpattern (_comma _? matchpattern)* _? '=>' _? subexpressionnoblock nextcodeline samedent (matchexpression | '')
  | ('|' | '!') _? matchpattern (_comma _? matchpattern)* _? '=>' block (matchexpression | '')

callparens =
  | '(' _? ')' // ignorenewline
  | '(' spaces? callarguments _? ')' // ignorenewline
  | '(' nextcodeline indent callarguments nextcodeline dedent ')'
  { arguments: [{ key, value }] }

iifexpression =
  | callparens _? '=>' _? subexpressionsecondinline
  | callparens _? '=>' block
  { type, arguments: [{ key, value }] }

iifexpressionsecondinline =
  | callparens _? '=>' _? subexpressionnoblock
  | callparens _? '=>' block
  { type, arguments: [{ key, value }] }

lambdaexpression =
  | '|' _? functionparameters _? '|' _? '=>' _? subexpressionsecondinline
  | '|' _? functionparameters _? '|' _? '=>' block
  { type, name, parameters: [{ immutable, alias, lhs, value }], body }

lambdaexpressionsecondinline =
  | '|' _? functionparameters _? '|' _? '=>' _? subexpressionnoblock
  | '|' _? functionparameters _? '|' _? '=>' block
  { type, name, parameters: [{ immutable, alias, lhs, value }], body }

importpath =
  | importnamechar+
  | stringliteral

importargument =
  | (_? identifier _? ':')? _? (identifier | operator)
  | '...'
  { key, value }

importarguments =
  | importargument (_comma importargument )* _comma?
  { members: [{ key, value }] }

importdeclaration =
  | 'import' (_ identifier _? ':') _ importpath  '{' _? importarguments _? '}' // ignorenewline
  | 'import' (_ identifier _? ':') _ importpath  '{' nextcodeline indent importarguments nextcodeline dedent '}'
  | 'import' (_ identifier _? ':') _ importpath
  { type, modulealias, modulename, path, all, members: [{ key, value }] }

exportarguments =
  | (identifier | operator) (_comma (identifier | operator))* _comma?
  | '...'
  { members: [{ key, value }] }

exportdeclaration =
  | 'export' _ '{' _? exportarguments _? '}' // ignorenewline
  | 'export' _ '{' nextcodeline indent exportarguments nextcodeline dedent '}'
  { type, members: [{ key, value }] }

conditionalexpression =
  | matchexpression
  | ifexpression
  | whileexpression
  | dowhileexpression
  | loopexpression
  | forexpression
  | tryexpression

conditionalexpressionsecondinline =
  | matchexpressionsecondinline
  | ifexpressionsecondinline
  | whileexpressionsecondinline
  | loopexpressionsecondinline
  | forexpressionsecondinline

declaration =
  | iifeexpression
  | lambdaexpression
  | subjectdeclaration
  | functiondeclaration
  | typedeclaration
  | abstdeclaration
  | importdeclaration
  | exportdeclaration

declarationsecondinline =
  | iifeexpressionsecondinline
  | lambdaexpressionsecondinline
  | subjectdeclarationsecondinline
  | functiondeclarationonrsecondinlinenest
  | typedeclarationsecondinline
  | abstdeclarationsecondinline

fieldlhsname
  | noname
  | identifier '*'
  | '...' identifier? '*'
  { internal, expression }

fieldlhsarguments =
  | fieldlhsname (_comma _? fieldlhsname)* _comma?
  { expressions }

fieldlhspattern =
  | '[' spaces? fieldlhsarguments _? ']' // ignorenewline
  | '[' nextcodeline indent fieldlhsarguments nextcodeline dedent ']'
  | '{' spaces? fieldlhsarguments _? '}' // ignorenewline
  | '{' nextcodeline indent fieldlhsarguments nextcodeline dedent '}'
  | '(' spaces? fieldlhsarguments _? ')' // ignorenewline
  | '(' nextcodeline indent fieldlhsarguments nextcodeline dedent ')'
  |  fieldlhsname (_comma _? fieldlhsname)*
  { destructuretype, arguments }

fieldhead =
  | ('let' | 'var') _ fieldlhspattern
  { immutable, lhs }

fielddeclaration =
  | fieldhead (_ '=' _ | '=' !operator) !(controlkeyword) subexpressionsecondinline
  | fieldhead (_ '=' _ | '=' !operator) nextcodeline indent !(controlkeyword) subexpression dedentoreoiend
  | fieldhead
  { type, immutable, lhs, value }

fielddeclarationsecondinline =
  | fieldhead (_ '=' _ | '=' !operator) !(controlkeyword) subexpressionnoblock
  | fieldhead (_ '=' _ | '=' !operator) nextcodeline indent !(controlkeyword) subexpression dedentoreoiend
  | fieldhead
  { type, immutable, lhs, value }

typename =
  | identifier '{' spaces? (typeset | typename) _? '}' '?'? // ignorenewline
  | identifier '{' nextcodeline indent (typeset | typename) nextcodeline dedent '}' '?'?
  | identifier '?'?

typesetoperator =
  | _ ('|' | '&') _
  | ('|' | '&') !operator

typeset =
  | typename (typesetoperator typename)+ '?'?

typesignatureargment =
  | typeset
  | typename
  | noname

typesignatureargments =
  | typesignatureargment (_comma _? typesignatureargment)* _comma?

typeconstraintargument =
  | (typeset | typename) typerelationoperator (typeset | typename)

typeconstraintarguments =
  | typeconstraintargument (_comma _? typeconstraintargument)*

typesignature =
  | '(' spaces? typesignatureargments _? ')' _? '->' _? (_ '~' _ | '~' !operator) typeconstraintarguments // ignorenewline
  | '(' nextcodeline indent typesignatureargments nextcodeline dedent ')' _? '->' _? (_ '~' _ | '~' !operator) typeconstraintarguments
  | typeset
  | typename

lambdaexpression =
  | '|' _? functionparameters _? '|' _? '=>' _? subexpressionsecondinline
  | '|' _? functionparameters _? '|' _? '=>' block
  { type, name, parameters: [{ immutable, alias, lhs, value }], body }

lambdaexpressionsecondinline =
  | '|' _? functionparameters _? '|' _? '=>' _? subexpressionnoblock
  | '|' _? functionparameters _? '|' _? '=>' block
  { type, name, parameters: [{ immutable, alias, lhs, value }], body }

blockoperator =
  | _ '=' _
  | '=' !operator
  | _? ':' _?

typehead =
  | 'type' _ identifier

typeconstructor =
  | '(' spaces? parameters _?')' // ignorenewline
  | '(' nextcodeline indent parameters nextcodeline dedent ')'

typeparents =
  | (_ '<:' _| '<:') identifier (_comma _? identifier)*
  { parenttypes }

typeblock =
  | nextcodeline indent fielddeclaration (nextcodeline samedent fielddeclaration)* dedentoreoiend

typedeclaration =
  | typehead (_ typeconstructor)? typeparents? blockoperator _? fielddeclaration
  | typehead (_ typeconstructor)? typeparents? blockoperator _? typeblock
  { type, name, constructorparameters: [{ immutable, alias, lhs, value }], supertypes, fields }

typedeclarationsecondinline =
  | typehead (_ typeconstructor)? typeparents? blockoperator _? typeblock
  { type, name, constructorparameters: [{ immutable, alias, lhs, value }], supertypes, fields }

typealias = // Also secondinline
  | typehead blockoperator _? typesignature
  | typehead blockoperator nextcodeline indent typesignature dedentoreoiend
  { type, name, typesignature }

absthead =
  | 'abst' _ identifier

subtypedeclaration =
  | identifier (_? '(' spaces? functionparameters _? ')')? // ignorenewline
  | identifier (_? '(' nextcodeline indent functionparameters nextcodeline dedent ')')?

abstsubtypeinline =
  | subtypedeclaration ((_ '|' _ | '|' !operator) subtypedeclaration)*

abstsubtypeblock =
  | nextcodeline indent ('|' _?)? subtypedeclaration (nextcodeline samedent '|' _? subtypedeclaration)* dedentoreoiend

abstdeclaration =
  | absthead (_ typeconstructor)? typeparents? blockoperator _? fielddeclaration
  | absthead (_ typeconstructor)? typeparents? blockoperator _? typeblock
  { type, name, constructorparameters: [{ immutable, alias, lhs, value }], supertypes, fields }

abstdeclarationsecondinline =
  | absthead (_ typeconstructor)? typeparents? blockoperator _? typeblock
  { type, name, constructorparameters: [{ immutable, alias, lhs, value }], supertypes, fields }

abstsubtypedeclaration = // Also secondinline
  | absthead (_ typeconstructor)? typeparents? blockoperator _? abstsubtypeinline
  | absthead (_ typeconstructor)? typeparents? blockoperator abstsubtypeblock
  { type, name, constructorparameters: [{ immutable, alias, lhs, value }], supertypes, subtypes }

functionparameter =
  | identifier ('.' lhspattern?)? _? ':' _? primitiveexpression
  | lhspattern
  | identifier

functionparameters =
  | functionparameter (_comma _? functionparameter)* _comma?

functionhead =
  | 'fun' _ (identifier | operator) _? '(' spaces? functionparameters _?')' // ignorenewline
  | 'fun' _ (identifier | operator) _? '(' nextcodeline indent functionparameters nextcodeline dedent ')'

functiondeclaration =
  | functionhead blockoperator subexpressionsecondinline
  | functionhead blockoperator block
  { type, name, parameters: [{ immutable, alias, lhs, value }], body }

functiondeclarationsecondinline =
  | functionhead blockoperator subexpressionnoblock
  | functionhead blockoperator block
  { type, name, parameters: [{ immutable, alias, lhs, value }], body }

subjecthead =
  | ('let' | 'var') _ lhspattern
  { immutable, lhs }

subjectdeclaration =
  | subjecthead (_ '=' _ | '=' !operator) subexpressionsecondinline
  | subjecthead (_ '=' _ | '=' !operator) nextcodeline indent subexpression dedentoreoiend
  | subjecthead
  { type, immutable, lhs, value }

subjectdeclarationsecondinline =
  | subjecthead (_ '=' _ | '=' !operator) !(controlkeyword) subexpressionnoblock
  | subjecthead (_ '=' _ | '=' !operator) nextcodeline indent subexpression dedentoreoiend
  | subjecthead
  { type, immutable, lhs, value }

programexpression =
  | importdeclaration
  | exportdeclaration
  | expression

program =
  | nextcodeline? (samedent programexpression (nextcodeline eoi? | _? eoi))+
  | nextcodeline eoi
  | ''

