eoi =
  | !.

digitbinary =
  | [0-1]

digitoctal =
  | [0-7]

digitdecimal =
  | [0-9]

digithexadecimal =
  | [0-9a-fA-F]

integerbinaryliteral =
  | '0b' digitbinary ('_'? digitbinary)*
  { type, value }

integeroctalliteral  =
  | '0o' digitoctal ('_'? digitoctal)*
  { type, value }

integerdecimalliteral  =
  | digitdecimal ('_'? digitdecimal)*
  { type, value }

integehexadecimalliteral  =
  | '0x' digithexadecimal ('_'? digithexadecimal)*
  { type, value }

integerliteral =
  | integerbinaryliteral
  | integeroctalliteral
  | integerdecimalliteral
  | integerhexadecimalliteral

floatbinaryliteral  =
  | '0b' digitbinary ('_'? digitbinary)* '.' digitbinary ('_'? digitbinary)* ('e' [-+]? digitbinary ('_'? digitbinary)*)?
  | '0b' digitbinary ('_'? digitbinary)* 'e' [-+]? digitbinary ('_'? digitbinary)*
  { type, value }

floatoctalliteral  =
  | '0o' digitoctal ('_'? digitoctal)* '.' digitoctal ('_'? digitoctal)* ('e' [-+]? digitoctal ('_'? digitoctal)*)?
  | '0o' digitoctal ('_'? digitoctal)* 'e' [-+]? digitoctal ('_'? digitoctal)*
  { type, value }

floatdecimalliteral  =
  | (digitdecimal ('_'? digitdecimal)*)? '.' digitdecimal ('_'? digitdecimal)* ('e' [-+]? digitdecimal ('_'? digitdecimal)*)?
  | digitdecimal ('_'? digitdecimal)* 'e' [-+]? digitdecimal ('_'? digitdecimal)*
  { type, value }

floathexadecimalliteral  =
  | '0x' digithexadecimal ('_'? digithexadecimal)* '.' digithexadecimal ('_'? digithexadecimal)* ('p' [-+]? digithexadecimal ('_'? digithexadecimal)*)?
  | '0x' digithexadecimal ('_'? digithexadecimal)* 'p' [-+]? digithexadecimal ('_'? digithexadecimal)*
  { type, value }

floatliteral =
  | floatbinaryliteral
  | floatoctalliteral
  | floatdecimalliteral
  | floathexadecimalliteral

numericliteral =
  | integerliteral
  | floatliteral

coefficientexpression =
  | integerbinaryliteral identifier
  | integeroctalliteral identifier
  | integerdecimalliteral identifier
  | floatbinaryliteral identifier
  | floatoctalliteral identifier
  | floatdecimalliteral identifier

booleanliteral =
  | 'true'
  | 'false'
  { type, value }

noname =
  | '_'

identifierbeginchar =
  | [a-zA-Z_] // TODO

identifierendchar =
  | identifierbeginchar
  | digit

identifier =
  | identifierbeginchar identifierendchar*
  { type, name }

operatorchar =
  | [+\-*/\\^%!><=÷×≠≈¹²³√]// TODO

operator =
  | operatorchar+
  { type, name }

pathnamechar =
  | identifierendchar | [\-] // TODO

charnonewlineorsinglequote =
  | .+ excluding(newline | "'") // TODO

charnonewlineordoublequote =
  | .+ excluding(newline | '"') // TODO

charnonewlineortriplesinglequote =
  | .+ excluding(newline | "'''") // TODO

charnonewlineortripledoublequote =
  | .+ excluding(newline | '"""') // TODO

charnohashequal =
  | .+ excluding('#=') // TODO

charnonewline =
  | .+ excluding(newline) // TODO

charnonewlineorforwardslash =
  | .+ excluding(newline | '/') // TODO

space =
  | [ \t]

nameseparation =
  | (!(identifier | numericliteral) | _)

indent =
  | ' '+
  { level }

samedent =
  | ' '+
  | ''
  { level }

dedent =
  | ' '+
  { level }

dedentoreoiend =
  | nextcodeline dedent
  | nextcodeline? _? &eoi

newline =
  | '\r'? '\n'

nextline =
  | newline (_? newline)*

linecontinuation =
  | space* '...' space* nextline samedent

_ =
  | linecontinuation
  | space+

singlelinecomment =
  | "#" charnonewline* &(newline | eoi)

multilinecomment =
  | "#=" charnohashequal* (multilinecomment charnohashequal*)? '=#' _? &(newline | eoi)

comment =
  | singlelinecomment
  | multilinecomment

singlelinestring =
  | "'" charnonewlineorsinglequote* "'" (nextcodeline samedent "'" charnonewlineorsinglequote* "'")*
  | '"' charnonewlineordoublequote* '"' (nextcodeline samedent '"' charnonewlineordoublequote* '"')*

multilinestring =
  | "'''" charnonewlineortriplesinglequote* (nextline samedent charnonewlineortriplesinglequote) "'''"
  | '"""' charnonewlineortripledoublequote* (nextline samedent charnonewlineortripledoublequote) '"""'

stringliteral =
  | singlelinestring
  | multilinestring

regexliteral =
  | '/' charnonewlineorforwardslash* '/'

nextcodeline =
  | _? nextline (samedent comment nextline)*

endcomma =
  | _? ','

listliteral =
  | '[' _? ']' // ignorenewline
  | '[' _? listliteral ((_? ',')? _? listliteral)+ commaend? _? ']' // ignorenewline
  | '[' nextcodeline indent listliteral (_? ',')? (nextcodeline samedent listliteral (_? ',')?)+ commaend? nextcodeline dedent ']'
  | '[' _? infixexpression (_? ',' _? infixexpression)* (_? ';' _? infixexpression (_? ',' _? infixexpression)*)* endcomma? _? ']' // ignorenewline
  | '[' nextcodeline indent infixexpression (_? ',' _? infixexpression)* (_? ';' infixexpression (_? ',' _? infixexpression)*)* endcomma? nextcodeline dedent ']'

dictliteral =
  | '{' _? '}' // ignorenewline
  | '{' _? infixexpression _? ':' _? infixexpression (_? ',' _? infixexpression _? ':' _? infixexpression)*  endcomma? _? '}' // ignorenewline
  | '{' nextcodeline indent infixexpression _? ':' _? infixexpression (_? ',' _? infixexpression _? ':' _? infixexpression)*  endcomma? nextcodeline dedent '}'
  | '{' nextcodeline indent infixexpression _? ':' _? dictblock (_? ','? nextcodeline samedent infixexpression _? ':' _? dictblock)* nextcodeline dedent '}'

dictblock =
  | nextcodeline indent infixexpression _? ':' _? (infixexpression | dictblock) endcomma? nextcodeline dedent

tupleliteral =
  | '(' _? ')' // ignorenewline
  | '(' _? infixexpression endcomma _? ')' // ignorenewline
  | '(' _? infixexpression (_? ',' _? infixexpression)+ endcomma? ')' // ignorenewline
  | '(' nextcodeline indent infixexpression (nextcodeline samedent infixexpression) endcomma? nextcodeline dedent ')'

namedtupleliteral =
  | '(' _? ':' _?  ')' // ignorenewline
  | '(' _? identifier _? ':' _? infixexpression (_? ',' _? identifier _? ':' _? infixexpression)* endcomma? ')' // ignorenewline
  | '(' nextcodeline indent identifier _? ':' _? infixexpression (nextcodeline samedent identifier _? ':' _? infixexpression) endcomma? nextcodeline dedent ')'

symbolliteral =
  | '$' identifier
  | '$' '(' _? openexpression _? ')' // ignorenewline
  | '$' '(' block ')'

literal =
  | booleanliteral
  | numericliteral
  | stringliteral
  | regexliteral
  | listliteral
  | dictliteral
  | tupleliteral
  | namedtupleliteral
  | symbolliteral

commandnotationpostfix =
  | _ &(symbolliteral | numericliteral | identifier | range) infixexpression

callpostfix =
  | '(' (_? identifier _? ':')? _? infixexpression (_? ',' (_? identifier _? ':')? _? infixexpression)* endcomma? _? ')' // ignorenewline
  | '(' nextcodeline indent (identifier _? ':' _?)? infixexpression (nextcodeline samedent (identifier _? ':' _?)? infixexpression) endcomma? nextcodeline dedent ')'

dotnotationpostfix =
  | [!?] _? '.' identifier
  | [!?] _? '.' '$' identifier
  | [!?] _? '.' '$' '[' _? listarguments _? ']' // ignorenewline
  | [!?] _? '.' '$' '{' _? dictarguments _? '}' // ignorenewline

cascadingnotationpostfix =
  | _? '~' identifier
  | _? '~' '$' identifier
  | _? '~' '$' '[' _? listarguments _? ']' // ignorenewline
  | _? '~' '$' '{' _? dictarguments _? '}' // ignorenewline

listelementpostfix =
  | _? '[' _? listarguments _? ']' // ignorenewline

listarguments =
  | listargument (_? ',' _? listargument)* endcomma?

listargument =
  | infixexpression _? ':' (_? infixexpression _? ':')? (_? infixexpression '!'?)?
  | ':' (_? infixexpression _? ':')? _? infixexpression '!'?
  | ':'
  | infixexpression

dictelementpostfix =
  | _? '{' _? dictarguments _? '}' // ignorenewline

dictarguments =
  | infixexpression (_? ',' _? infixexpression)* endcomma?

range =
  | infixexpression _? '..' (_? infixexpression _? '..')? (_? infixexpression)?
  | '..' (_? infixexpression _? '..')? _? infixexpression

ternaryoperator =
  | '(' _? infixexpression _? ')' '?' infixexpression ':' infixexpression  // ignorenewline
  | '(' _? infixexpression _? ')' _ '?' _ infixexpression _ ':' _ infixexpression  // ignorenewline

generatorcomprehension =
  | '{' _? infixexpression _? '|' _? forhead (_? ';' _? forhead)* (_ 'where' _ infixexpression)? _? '}' // ignorenewline

listcomprehension =
  | '[' _? infixexpression _? '|' _? forhead (_? ';' _? forhead)* (_ 'where' _ infixexpression)? _? ']' // ignorenewline

dictcomprehension =
  | '{' _? infixexpression _? ':' _? infixexpression _? '|' _? forhead (_? ';' _? forhead)* (_ 'where' _ infixexpression)? _? '}' // ignorenewline

comprehension =
  | generatorcomprehension
  | listcomprehension
  | dictcomprehension

return =
  | 'return' nameseparation expressionnocontrolptimitive

yield =
  | 'yield' (_ 'from')? nameseparation expressionnocontrolptimitive

raise =
  | 'raise' nameseparation expressionnocontrolptimitive

continue =
  | 'continue' (_? '@' identifier)?

break =
  | 'break' (nameseparation expressionnocontrolptimitive)?  (_? '@' identifier)?

spill =
  | 'spill' (_? '@' identifier)?

controlprimitive =
  | return
  | yield
  | continue
  | break
  | raise
  | spill

subatompostfix =
  | commandnotationpostfix
  | callpostfix
  | dotnotationpostfix
  | cascadingnotationpostfix
  | listelementpostfix
  | dictelementpostfix

subatom =
  | '(' _? tupleexpression _? ')' identifier? // ignorenewline
  | '(' nextcodeline indent simpleexpression (_? ',' _? simpleexpression)* (_? ',')? nextcodeline dedent ')' identifier?
  | coefficientexpression
  | literal
  | noname
  | identifier

atom =
  | subatom subatompostfix+

prefixatom =
  | operator atom

postfixatom =
  | integralliteral '.'
  | atom operator

prepostfixatom =
  | prefixatom
  | postfixatom
  | atom

infixexpression =
  | range
  | prefixatom operator infixexpressionrest+
  | atom operator infixexpressionrest+
  | prepostfixatom _ operator _ infixexpressionrest+

infixexpressionrest =
  | prefixatom operator infixexpressionrest+
  | atom operator infixexpressionrest+
  | prepostfixatom _ operator _ infixexpressionrest+
  | prepostfixatom

simpleexpression =
  | ternaryoperator
  | infixexpression
  | prepostfixatom

tupleexpression =
  | simpleexpression (_? ',' _? simpleexpression)* (_? ',')?

subexpression =
  | declaration
  | conditionalexpression
  | controlprimitive
  | tupleexpression

expression =
  | subexpression (_? ';' _? expression)* (_? ';')?

// Used in control primitives.
// makes `return exp, exp` possible
// but not `return return exp`
// and not `yield break exp`
subexpressionnocontrolptimitive =
  | declaration
  | conditionalexpression
  | tupleexpression

expressionnocontrolptimitive =
  | subexpressionnocontrolptimitive (_? ';' _? expressionnocontrolptimitive)* (_? ';')?

// Used in declarations and condiational expressions.
// makes `if ... : if ... : exp` possible
subexpressionnoblock =
  | tupleexpression
  | controlprimitive

expressionnoblock =
  | subexpressionnoblock (_? ';' _? expressionnoblock)* (_? ';')?

// Used in declarations and conditional expressions.
// makes `if ... : if ... : block` possible
// also makes `if ... : if ... : exp` possible
// also makes `if ... : exp else: exp` possible
// but not `if ... : if ... : exp else: exp`
// and not `if ... : if ... : exp for ... : exp`
// and not `if ... : if ... : exp else: exp else: exp`
// and not `if ... : for ... : exp else: exp`
subexpressiononeinlinenest =
  | declarationoneinlinenest
  | conditionalexpressiononeinlinenest
  | controlprimitive
  | tupleexpression

expressiononeinlinenest =
  | subexpressiononeinlinenest (_? ';' _? expressiononeinlinenest)* (_? ';')?

block =
  | nextcodeline indent openexpression (nextcodeline samedent openexpression)* dedentoreoiend

lhspattern =
  | '(' _? lhsname (_? ',' _? lhsname)* endcomma? _? ')' // ignorenewline
  | '(' nextcodeline indent  lhsname (_? ',' _? lhsname)* endcomma? nextcodeline dedent ')'
  | '[' _? lhsname (_? ',' _? lhsname)* endcomma? _? ']' // ignorenewline
  | '[' nextcodeline indent  lhsname (_? ',' _? lhsname)* endcomma? nextcodeline dedent ']'
  | '{' _? lhsname (_? ',' _? lhsname)* endcomma? _? '}' // ignorenewline
  | '{' nextcodeline indent lhsname (_? ',' _? lhsname)* endcomma? nextcodeline dedent '}'
  |  lhsname (_? ',' _? lhsname)*

lhsname
  | noname
  | identifier
  | '...' identifier?

ifhead =
  | infixexpression (_ 'where' _ infixexpression)?
  | subjectdeclaration (_ 'where' _ infixexpression)?

elifexpression =
  | 'elif' namesaparation ifhead _? ':' _? expressiononeinlinenest
  | 'elif' namesaparation ifhead _? ':' block

elseexpression =
  | 'else' _? ':' _? expressiononeinlinenest
  | 'else' _? ':' block

ifexpression =
  | 'if' namesaparation ifhead _? ':' _? expressiononeinlinenest (_? elifexpression)* (_? elseexpression)?
  | 'if' namesaparation ifhead _? ':' block (_? elifexpression)* (_? elseexpression)?

ifexpressiononeinlinenest =
  | 'if' namesaparation ifhead _? ':' _? expressionnoblock
  | 'if' namesaparation ifhead _? ':' block

whileexpression =
  | 'while' namesaparation ifhead _? ':' _? expressiononeinlinenest (_? endexpression)?
  | 'while' namesaparation ifhead _? ':' block endexpression?

whileexpressiononeinlinenest =
  | 'while' namesaparation ifhead _? ':' _? expressionnoblock
  | 'while' namesaparation ifhead _? ':' block

dowhileexpression =
  | 'do' _? ':'  _? expressiononeinlinenest _? 'while' namesaparation ifhead _?
  | 'do' _? ':' block 'while' namesaparation ifhead _?

loopexpression =
  | 'loop' _? ':' _? expressiononeinlinenest (_? endexpression)?
  | 'loop' _? ':' block endexpression?

loopexpressiononeinlinenest =
  | 'loop' _? ':' _? expressionnoblock
  | 'loop' _? ':' block

endexpression =
  | 'end' _? ':' _? expressiononeinlinenest
  | 'end' _? ':' block

forhead =
  | 'var'? lhspattern _ 'in' _ infixexpression (_ 'where' _ infixexpression)?

forexpression =
  | 'for' namesaparation forhead _? ':' _? expressiononeinlinenest (_? endexpression)?
  | 'for' namesaparation forhead _? ':' block endexpression?

forexpressiononeinlinenest =
  | 'for' namesaparation forhead _? ':' _? expressionnoblock
  | 'for' namesaparation forhead _? ':' block

ensureexpression =
  | 'ensure' _? ':' _? expressiononeinlinenest
  | 'ensure' _? ':' block

exceptexpression =
  | 'except' _ identifier _? ':' _? expressiononeinlinenest
  | 'except' _ identifier _? ':' block

tryexpression =
  | 'try' _? ':' _? expressiononeinlinenest (_? exceptexpression)+ (_? ensureexpression)?
  | 'try' _? ':' block (_? exceptexpression)+ (_? ensureexpression)?
  | 'try' 'var'? namesaparation lhspattern (_ '=' _ infixexpression | '=' !(operator) infixexpression) ':' _? expressiononeinlinenest (_? exceptexpression)+ (_? ensureexpression)?
  | 'try' 'var'? namesaparation lhspattern (_ '=' _ infixexpression | '=' !(operator) infixexpression) ':' block (_? exceptexpression)+ (_? ensureexpression)?

matchpattern =
  | (identifier _?)? '(' _? matchatom (_? ',' _? matchatom)* endcomma? _? ')' // ignorenewline
  | (identifier _?)? '(' nextcodeline indent  matchatom (_? ',' _? matchatom)* endcomma? nextcodeline dedent ')'
  | '[' _? matchatom (_? ',' _? matchatom)* endcomma? _? ']' // ignorenewline
  | '[' nextcodeline indent  matchatom (_? ',' _? matchatom)* endcomma? nextcodeline dedent ']'
  | '{' _? matchatom (_? ',' _? matchatom)* endcomma? _? '}' // ignorenewline
  | '{' nextcodeline indent matchatom (_? ',' _? matchatom)* endcomma? nextcodeline dedent '}'
  |  matchatom (_? ',' _? matchatom)*

matchatom
  | infixexpression
  | noname
  | identifier
  | '...' identifier?

matchsingleexpression =
  | ('|' | '!') _? matchpattern _? '=>' _? expressiononeinlinenest
  | ('|' | '!') _? matchpattern _? '=>' block

matchexpression =
  | infixexpression? (_? matchsingleexpression)+
  | infixexpression? (nextcodeline samedent matchsingleexpression)+

matchexpressiononeinlinenest =
  | infixexpression? _? ('|' | '!') _? matchpattern _? '=>' _? expressionnoblock
  | infixexpression? _? ('|' | '!') _? matchpattern _? '=>' block

iifexpression =
  | callpostfix _? '=>' _? expressiononeinlinenest
  | callpostfix _? '=>' block

iifexpression =
  | callpostfix _? '=>' _? expressiononeinlinenest
  | callpostfix _? '=>' block

iifeexpressiononeinlinenest =
  | callpostfix _? '=>' _? expressionnoblock

lambdaexpression =
  | '|' _? functionparameters endcomma? _? '|' _? '=>' _? expressiononeinlinenest
  | '|' _? functionparameters endcomma? _? '|' _? '=>' block

lambdaexpressiononeinlinenest =
  | '|' _? functionparameters endcomma? _? '|' _? '=>' _? expressionnoblock
  | '|' _? functionparameters endcomma? _? '|' _? '=>' block

importpathname =
  | pathnamechar+
  | '..'
  | '.'

importpath =
  | ('/' _?)? importpathname (_? '/' _? importpathname)*
  | stringliteral

importdeclaration =
  | 'import' (_ identifier _? ':') _ importpath  '{' (_? identifier _? ':')? _? (identifier | operator) (_? ',' (_? identifier _? ':')? _? (identifier | operator) )* endcomma? _? '}' // ignorenewline
  | 'import' (_ identifier _? ':') _ importpath  '{' nextcodeline indent (identifier _? ':' _?)? (identifier | operator) (nextcodeline samedent (identifier _? ':' _?)? (identifier | operator)) endcomma? nextcodeline dedent '}'
  | 'import' (_ identifier _? ':') _ importpath

exportdeclaration =
  | 'export' _? '{' _? (identifier | operator) (_? ',' _? (identifier | operator))* endcomma? _? '}' // ignorenewline

conditionalexpression =
  | matchexpression
  | ifexpression
  | whileexpression
  | dowhileexpression
  | loopexpression
  | forexpression
  | tryexpression

conditionalexpressiononeinlinenest =
  | matchexpressiononeinlinenest
  | ifexpressiononeinlinenest
  | whileexpressiononeinlinenest
  | loopexpressiononeinlinenest
  | forexpressiononeinlinenest

declaration =
  | iifeexpression
  | lambdaexpression
  | subjectdeclaration
  | functiondeclaration
  | typedeclaration
  | abstdeclaration
  | importdeclaration
  | exportdeclaration

declarationoneinlinenest =
  | iifeexpressiononeinlinenest
  | lambdaexpressiononeinlinenest
  | subjectdeclarationoneinlinenest
  | functiondeclarationonrinlinenest
  | typedeclarationoneinlinenest
  | abstdeclarationoneinlinenest

typehead =
  | ('type' | 'abst') _ identifier

subtype =
  | identifier (_? '(' _? functionparameters _? ')')? // ignorenewline
  | identifier (_? '(' nextcodeline indent functionparameters nextcodeline dedent ')')?

typebody =
  | subjectdeclaration
  | '|'? _? subtype (_? '|' subtype)*

typebodyoneinlinenest =
  | subjectdeclarationoneinlinenest
  | '|'? _? subtype (_? '|' subtype)*

names =
  | identifier (_? ',' _? identifier)*

typeblock =
  | nextcodeline indent typebody (nextcodeline samedent typebody)* dedentoreoiend

typedeclaration =
  | typehead _? '(' _? parameters _?')' (_? '<:' _? names)?// ignorenewline
  | typehead _ identifier _? '(' nextcodeline indent parameters nextcodeline dedent ')' (_? '<:' _? names)?
  | typehead (_ '=' _ | '=' !operator | _? ':' _?) typebodyoneinlinenest
  | typehead (_ '=' _ | '=' !operator) nextcodeline indent typebody dedentoreoiend
  | typehead _? ':' typeblock
  { identifier, supertypes, field }

typedeclarationoneinlinenest =
  | typehead (_ '=' _ | '=' !operator | _? ':' _?) expressionnoblock
  | typehead (_ '=' _ | '=' !operator) nextcodeline indent expression dedentoreoiend
  | typehead _? ':' block

functionparameters =
  | functionparameter (_? ',' _? functionparameter)* endcomma?

functionparameter =
  | identifier ('.' lhspattern?)? _? ':' _? infixexpression
  | lhspattern
  | identifier

functionhead =
  | 'fun' _ identifier _? '(' _? functionparameters _?')' // ignorenewline
  | 'fun' _ identifier _? '(' nextcodeline indent functionparameters nextcodeline dedent ')'

functiondeclaration =
  | functionhead (_ '=' _ | '=' !operator | _? ':' _?) expressiononeinlinenest
  | functionhead (_ '=' _ | '=' !operator) nextcodeline indent expression dedentoreoiend
  | functionhead _? ':' block
  { identifier, expression }

functiondeclarationoneinlinenest =
  | functionhead (_ '=' _ | '=' !operator | _? ':' _?) expressionnoblock
  | functionhead (_ '=' _ | '=' !operator) nextcodeline indent expression dedentoreoiend
  | functionhead _? ':' block

subjecthead =
  | ('let' | 'var') nameseparation lhspattern
  | ('let' | 'var') nameseparation identifier (_ identifier)+

subjectdeclaration =
  | subjecthead (_ '=' _ | '=' !operator) expressiononeinlinenest
  | subjecthead (_ '=' _ | '=' !operator) nextcodeline indent expression dedentoreoiend

subjectdeclarationoneinlinenest =
  | subjecthead (_ '=' _ | '=' !operator) expressionnoblock
  | subjecthead (_ '=' _ | '=' !operator) nextcodeline indent expression dedentoreoiend
  { mutability, identifier, expression }

program =
  | (comment? nextcodeline)? (samedent expression (nextcodeline eoi? | _? eoi))+
  | (comment? nextcodeline? eoi)?
