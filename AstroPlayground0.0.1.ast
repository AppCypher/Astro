# 21/05/17
# Astro 0.0.01
# 
a == b
a === b 

# 
loop: #@ top 
    while x == 5: 
        x += 1
        if x > 1: break at top 

fun add a, b: #@ top
    fun _:
        return a + b at top

# 
var name = 'Dope'
fun setName object: 
    var name = "Swag"
    object.name = name + ext.name

#  
var func = |a, b| 
    if a > b: recall --a, b 
    a + b

# 20/05/17
# Astro 0.0.01
# ASTRO QUIRKS
# parameter annotation 
type T !param1.`, !param2.`
# function call vs enclosed argument   
play(song, artist)
play (song, artist)
# list indexing vs list argument 
list[2]
list [2]

# BITWISE # TODO DOCUMENT 2
bitshl, bitshr, bitushr, bitand, bitor, bitxor, bitinv

# INITIALIZER TRAIN # TODO DOCUMENT 2
type TeachingStudent <: Teacher, Student
fun Pegasus <name, staffId : studentId> 

# WHILE TRY # TODO DOCUMENT 2
while try getMood: 
    print 'Has mood'

while try line = file.readNextLine: 
    println line
catch FileNotFounError:
    println 'File missing!'

# ERROR COALESCING # TODO DOCUMENT 2
let realName = map['appcypher'] catch KeyError ?? name

# TRY CATCH REDESIGNED # TODO DOCUMENT 2
try: 
    process bigData  
catch err:  
    println err.msg
ensure:
    restore bigData

try process(bigData)
catch err: #:: DivByZeroError
    println err.msg

try data = getData: 
    use data 

ensure: 
    file.close

# IF AND NIL # TODO DOCUMENT 2
if data = getData: 
    println data

# TUPLE LITERAL # TODO DOCUMENT 2
var (single) = 5
var empty = ()
print (name, age) # this is a tuple

# UNION / INTERSECTION TYPES # TODO DOCUMENT 2 # from Swift, TypeScript
var pegasus #: Bird&Horse
var identification #: Str|Int

# WHEN # TODO DOCUMENT 2 # from Kotlin
return when x 
| 'a': 1
| 'b': 2

print fruit when fruit
| 'grape'
| 'apple'

# NOT IN # TODO DOCUMENT 2  # redesigned based on Kotlin
if x !in [1..20]: println 'x is lesser than 20'

# PROPERTIES # TODO DOCUMENT 2 # from C#
var name = get "[firstname] [surname]"
var age =
    set( var extra = 5; age += extra )
    get age -= 5 

# LAMBDA # TODO DOCUMENT 2 # from Scala
let sum3 = fun _ a, b: 
    return a + b + c 

fun sum3 = |a, b, c|
    return a + b + c

var num = [1, 2, 3, 4].fold(0, |a, b| a + b)
var nums = [1, 2, 3, 4].fold(0, || $1 + $2)


# TERNARY OPERATOR # TODO DOCUMENT 2 # from C++
x > y ~ x : y

# SINGLETON # TODO DOCUMENT 2 # redesigned based on Java and Scala
var injector = obj !component`

var runnable = obj Runnable
fun taskFinished runnable: #: runnable
    println 'Task finished'

fun run runnable: #: runnable
    doSomething 
    runnable.onTaskFinised

# COALESCING # TODO DOCUMENT 2
let name = person.name ?? "John Doe"
let realName = map['appcypher'] catch KeyError ?? name


# 19/05/17
# Astro 0.0.01
# ACCESS MODS # TODO DOCUMENT 2
let job = "Janitor" # public 
let name` = "Steve" # private

# SINGLETON # TODO DOCUMENT 2
obj someTask <: Runnable: 
fun run sometask: #: someTask
    println 'Task running...'
    someTask.onTaskFinished

fun onTaskFinished someTask: #: someTask
    println 'Task finished!'

# 13/05/17
# Astro 0.0.01
# TUPLE LITERAL # TODO DOCUMENT 2
let name = ()
let john = ("John",) # not the coma for single element tuple literal

# DEFAULT CONSTRUCTOR # TODO DOCUMENT 2
var book #: Str # Str is a type annotation here 
fun getBook str
type Person:
    var name = Str # Str is a default constructor here
    var age = Int

# DYNAMIC FUNCTION CALL # TODO DOCUMENT 2
fun sum a, b:  a + b 
sum ...list # unless list is statically known, this can lead to runtime error.

# EXPORT # TODO DOCUMENT 2
export: 
    add$ Int, Int -> Int 
    sub$ Int, Int -> Int

# GENERATOR # TODO DOCUMENT 2  # from Python
var count = for x = [..27]: var z = yield x
count.next
count.send
count.raise 

# 05/05/17
# Astro 0.0.01
# ASSIGNMENT PATTERN MATCHING # TODO DOCUMENT 2
var [list] = [2..56]
var (name) = [1, 2, 3]
var {x, y, z} = Point 4, 5, 6
let [keys:values] = dict 
var a, b, c = ..."abc" 
var a, ...b = list 
var (i, j, k) = 50 
var d, e, f = 6, 7

# TYPE ANNOTATION # TODO DOCUMENT 2
type GameMaker #> task
fun createJob #> asyn
fun add a, b: #: Int, Int -> Int #> asyn
    a + b 

# 30/04/17
# Astro 0.0.01
# TYPE ANNOTATION 
;; Int, Int
fun add a, b 

type Person name, age ;; Str, Str

fun swap _a, _b: ;;! ref, ref 
    a, b = b, a

fun swap _a, _b: #! ref, ref 
    a, b = b, a

# WHILE TRY 
while try getMood: 
    print 'Has mood'

while line = try file.readNextLine: 
    print line, '\n'

# MUTABLE IMPLICIT SUBJECTS
for _x = [1..20]: 
    print x 

while _name = getName: 
    name += oldName
    println name 

type Person _name, _age

# 23/04/17
# Astro 0.0.01
def add(a, b):
    return a + b 

fun add a, b: 
    a + b

# 21/04/17
# Astro 0.0.01
# LIST COMPREHENSION TODO DOCUMENT 
i << i, j = [0..20], [4..3..40], |i and j|.mod 2 == 0

i, j << i = [0..20] << j = [21..40]

# 22/03/17
# Dexter 0.2.01
# SWIFT
enum OptionalValue<Wrapped> {
    case none
    case some(Wrapped)
}
var possibleInteger: OptionalValue<Int> = .none
possibleInteger = .some(100)
# ASTRO
enum OptionalValue:
    none, some x #: $T
var possibleInteger = OptionalValue.none
possibleInteger = some 100

# IMPROVING GENERICS TODO DOCUMENT
# SWIFT
func anyCommonElements<T: Sequence, U: Sequence>(_ lhs: T, _ rhs: U) -> Bool
    where T.Iterator.Element: Equatable, T.Iterator.Element == U.Iterator.Element {
        for lhsItem in lhs {
            for rhsItem in rhs {
                if lhsItem == rhsItem {
                    return true
                }
            }
        }
        return false
}
# ASTRO
#: where T.Iterator.Element<:Equatable, T.Iterator.Element::U.Iterator.Element 
fun anyCommonElements lhs, rhs: #: $T<:Sequence, $U<:Sequence
    for lhsItem = lhs, for rhsItem = rhs: 
        lhsItem == rhsItem ? return true : _
    false

# 19/03/17
# Dexter 0.2.01
# CHAINING IN TERNARY OPERATOR TODO DOCUMENT
isCurrentlyFront ? Camera.open->(cameraId) : ->(cameraId)

# 08/03/17
# Dexter 0.2.01
# RETURN NOTHING TODO DOCUMENT
fun effect mood: #: Mood ->
    ~ .isHappy: happySong ->play
    ~ .isSad: sadSong ->play
    _


# EXHAUSTIVE PATTERN MATCHING TODO DOCUMENT
bar
| Node(value) where value != 42: println value
~ not in [1..45]: println bar

# OPTIONAL ENUM TODO DOCUMENT
enum FontStyle:
    bold, italic, underline, strikeThrough
# ...
font.+style = FontStyle.|bold & italic & strikethrough|
# ...
if font.style == bold: _

# REDO KEYWORD IS BACK TODO DOCUMENT
loop: print x

redo: print x
while x < y

# INITIALIZER TYPES STAY TODO DOCUMENT
- It makes the code clunky especially when adding an initializer train
type Person name, age
type Employee {name, age}, job <: Person
enum Tree:
    Leaf value #: $T
    Node l, r #: Tree, Tree

fun Teacher name, age, org, subjects:
    new {name, age : org}, subjects

# REMOVE USING AND HIDING KEYWORDS TODO DOCUMENT
var dataTree = Tree
dataTree = Leaf 25
fun println tree: #: Tree
    | Leaf v: println v
    | Node l, r: println l, println r


# FIRST-CLASS FUNCTIONS TODO DOCUMENT
fun plus = add$ Int, Int
let join = add$ Int, 0

fun map list, func:
    for i = list, if func i: yield i

# CONSTRAINTS TODO DOCUMENT
var a = Int
var b = 8``16
var c = ref Str

#: ref Int, ref x``y -> Int
fun rectArea l, b: return l * b

# EFFECTS SYSTEM PROPOSAL TODO DOCUMENT
fun show x: #: $T -> | all | readIO
    echo x

# VARARGS TODO DOCUMENT
fun foo ...args, x
fun foo x, ...args
fun foo x, ...args, y

# LOCKED OPERATORS TODO DOCUMENT
\ | ` . , ? : ! <- ->

# GLOBALS
- module subjects and type keep fields can only be private or read-only.

# 03/03/17
# Dexter 0.2.01
# 0-BASED INDEXING TODO DOCUMENT
for i = [0..20]:
    print i

